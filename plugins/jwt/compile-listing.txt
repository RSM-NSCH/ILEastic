system -q "CHGATR OBJ('jwt.rpgmod') ATR(*CCSID) VALUE(819)"
system -i "CRTRPGMOD MODULE(MIHAELILEA/jwt) SRCSTMF('jwt.rpgmod') OUTPUT(*PRINT) OPTION(*NOUNREF *SRCSTMT) STGMDL(*INHERIT) INCDIR('../../headers' '../..') DBGVIEW(*ALL) TGTRLS(*CURRENT) DEFINE()  TGTCCSID(*JOB)"
CPD000D: Command QSYS/CRTRPGMOD not safe for a multithreaded job.
RNS9305: Module JWT placed in library MIHAELILEA. 00 highest severity. Created on 24-04-25 at 09:52:45.
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      1
  Command  . . . . . . . . . . . . :   CRTRPGMOD
    Issued by  . . . . . . . . . . :     MIHAEL
  Module . . . . . . . . . . . . . :   JWT
    Library  . . . . . . . . . . . :     MIHAELILEA
  Text 'description' . . . . . . . :   *SRCMBRTXT
  Source stream file   . . . . . . :   jwt.rpgmod
    CCSID  . . . . . . . . . . . . :     819
  Target CCSID . . . . . . . . . . :   *JOB (273)
  Text 'description' . . . . . . . :
  Last Change  . . . . . . . . . . :   24-04-25  09:52:41
  Generation severity level  . . . :   10
  Compiler options . . . . . . . . :   *XREF      *GEN       *NOSECLVL  *SHOWCPY
                                       *EXPDDS    *EXT       *NOSHOWSKP *SRCSTMT
                                       *DEBUGIO   *NOUNREF   *NOEVENTF
  Debugging views  . . . . . . . . :   *ALL
  Debug encryption key . . . . . . :   *NONE
  Output . . . . . . . . . . . . . :   *PRINT
  Optimization level . . . . . . . :   *NONE
  Source listing indentation . . . :   *NONE
  Type conversion options  . . . . :   *NONE
  Sort sequence  . . . . . . . . . :   *HEX
  Language identifier  . . . . . . :   *JOBRUN
  Replace module . . . . . . . . . :   *YES
  Authority  . . . . . . . . . . . :   *LIBCRTAUT
  Truncate numeric . . . . . . . . :   *YES
  Fix numeric  . . . . . . . . . . :   *NONE
  Target release . . . . . . . . . :   *CURRENT
  Allow null values  . . . . . . . :   *NO
  Storage model . . .  . . . . . . :   *INHERIT
  Binding directory  . . . . . . . :   *NONE
  Define condition names . . . . . :   *NONE
  Enable performance collection  . :   *PEP
  Profiling data . . . . . . . . . :   *NOCOL
  Licensed Internal Code options . :
  Generate program interface . . . :   *NO
  Include directory  . . . . . . . :   ../../headers
                                   :   ../..
  Preprocessor options . . . . . . :   *NONE
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      2
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
                          S o u r c e   L i s t i n g
000001 **FREE                                                                                                               000001
000002                                                                                                                      000002
000003 ///                                                                                                                  000003
000004 // ILEastic : JWT Service Program                                                                                    000004
000005 //                                                                                                                   000005
000006 // This service program offers procedures for signing and verifying JWT tokens.                                      000006
000007 //                                                                                                                   000007
000008 // @author Mihael Schmidt                                                                                            000008
000009 // @date 04.05.2019                                                                                                  000009
000010 // @project ILEastic                                                                                                 000010
000011 ///                                                                                                                  000011
000012                                                                                                                      000012
000013 ctl-opt nomain thread(*concurrent);                                                                                  000013
000014                                                                                                                      000014
000015                                                                                                                      000015
000016 /if not defined(QUSEC)                                                                                               000016
000017 /define QUSEC                                                                                                        000017
000018 /copy QSYSINC/QRPGLESRC,QUSEC                                                                                        000018
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  QUSEC                                                        *                     1
        * External name  . . . . . . :  QSYSINC/QRPGLESRC(QUSEC)                                     *                     1
        * Last change  . . . . . . . :  19-02-17  10:02:41                                           *                     1
        * Text 'description' . . . . :  COMMON STRUCTURE FOR ERROR CODE PARAMETER                    *                     1
        *--------------------------------------------------------------------------------------------*
000001+D*** START HEADER FILE SPECIFICATIONS ****************************                                        000000    1000001
000002+D*                                                                                                        000000    1000002
000003+D*Header File Name: H/QUSEC                                                                               000000    1000003
000004+D*                                                                                                        000000    1000004
000005+D*Descriptive Name: Error Code Parameter.                                                                 000000    1000005
000006+D*                                                                                                        000000    1000006
000007+D*5763-SS1, 5722-SS1 (C) Copyright IBM Corp. 1994, 2001.                                                  000000    1000007
000008+D*All rights reserved.                                                                                    000000    1000008
000009+D*US Government Users Restricted Rights -                                                                 000000    1000009
000010+D*Use, duplication or disclosure restricted                                                               000000    1000010
000011+D*by GSA ADP Schedule Contract with IBM Corp.                                                             000000    1000011
000012+D*                                                                                                        000000    1000012
000013+D*Licensed Materials-Property of IBM                                                                      000000    1000013
000014+D*                                                                                                        000000    1000014
000015+D*                                                                                                        000000    1000015
000016+D*Description: Include header file for the error code parameter.                                          000000    1000016
000017+D*                                                                                                        000000    1000017
000018+D*Header Files Included: None.                                                                            000000    1000018
000019+D*                                                                                                        000000    1000019
000020+D*Macros List: None.                                                                                      000000    1000020
000021+D*                                                                                                        000000    1000021
000022+D*Structure List: Qus_EC_t                                                                                000000    1000022
000023+D*             Qus_ERRC0200_t                                                                             000000    1000023
000024+D*                                                                                                        000000    1000024
000025+D*Function Prototype List: None.                                                                          000000    1000025
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      3
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000026+D*                                                                                                        000000    1000026
000027+D*Change Activity:                                                                                        000000    1000027
000028+D*                                                                                                        000000    1000028
000029+D*CFD List:                                                                                               000000    1000029
000030+D*                                                                                                        000000    1000030
000031+D*FLAG REASON       LEVEL DATE   PGMR      CHANGE DESCRIPTION                                             000000    1000031
000032+D*---- ------------ ----- ------ --------- ----------------------                                         000000    1000032
000033+D*                                                                                                        000000    1000033
000034+D*End CFD List.                                                                                           000000    1000034
000035+D*                                                                                                        000000    1000035
000036+D*Additional notes about the Change Activity                                                              000000    1000036
000037+D*End Change Activity.                                                                                    000000    1000037
000038+D*** END HEADER FILE SPECIFICATIONS ******************************                                        000000    1000038
000039+D*****************************************************************                                        000000    1000039
000040+D*Record structure for Error Code Parameter                                                               000000    1000040
000041+D****                                                          ***                                        000000    1000041
000042+D*NOTE: The following type definition only defines the fixed                                              000000    1000042
000043+D*   portion of the format.  Varying length field Exception                                               000000    1000043
000044+D*   Data will not be defined here.                                                                       000000    1000044
000045+D*****************************************************************                                        000000    1000045
000046+DQUSEC            DS                                                                                      000000    1000046
000047+D*                                             Qus EC                                                     000000    1000047
000048+D QUSBPRV                 1      4I 0                                                                     000000    1000048
000049+D*                                             Bytes Provided                                             000000    1000049
000050+D QUSBAVL                 5      8I 0                                                                     000000    1000050
000051+D*                                             Bytes Available                                            000000    1000051
000052+D QUSEI                   9     15                                                                        000000    1000052
000053+D*                                             Exception Id                                               000000    1000053
000054+D QUSERVED               16     16                                                                        000000    1000054
000055+D*                                             Reserved                                                   000000    1000055
000056+D*QUSED01                17     17                                                                        000000    1000056
000057+D*                                                                                                        000000    1000057
000058+D*                                      Varying length                                                    000000    1000058
000059+DQUSC0200         DS                                                                                      000000    1000059
000060+D*                                             Qus ERRC0200                                               000000    1000060
000061+D QUSK01                  1      4I 0                                                                     000000    1000061
000062+D*                                             Key                                                        000000    1000062
000063+D QUSBPRV00               5      8I 0                                                                     000000    1000063
000064+D*                                             Bytes Provided                                             000000    1000064
000065+D QUSBAVL14               9     12I 0                                                                     000000    1000065
000066+D*                                             Bytes Available                                            000000    1000066
000067+D QUSEI00                13     19                                                                        000000    1000067
000068+D*                                             Exception Id                                               000000    1000068
000069+D QUSERVED39             20     20                                                                        000000    1000069
000070+D*                                             Reserved                                                   000000    1000070
000071+D QUSCCSID11             21     24I 0                                                                     000000    1000071
000072+D*                                             CCSID                                                      000000    1000072
000073+D QUSOED01               25     28I 0                                                                     000000    1000073
000074+D*                                             Offset Exc Data                                            000000    1000074
000075+D QUSLED01               29     32I 0                                                                     000000    1000075
000076+D*                                             Length Exc Data                                            000000    1000076
000077+D*QUSRSV214              33     33                                                                        000000    1000077
000078+D*                                             Reserved2                                                  000000    1000078
000079+D*                                                                                                        000000    1000079
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      4
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000080+D*QUSED02                34     34                                                                        000000    1000080
000081+D*                                                                                                        000000    1000081
000082+D*                                      Varying Length    @B1A                                            000000    1000082
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000019 /endif                                                                                                               000019
000020                                                                                                                      000020
000021 /include 'base64url.rpginc'                                                                                          000021
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  base64url+                                                   *                     2
        * External name  . . . . . . :  ./base64url.rpginc                                           *                     2
        * Last change  . . . . . . . :  23-12-17  06:51:29                                           *                     2
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              2000001
000002+                                                                                                                    2000002
000003+/if defined (JWT_BASE64URL)                                                                                         2000003
            LINES EXCLUDED: 1
000005+/endif                                                                                                              2000005
000006+                                                                                                                    2000006
000007+/define JWT_BASE64URL                                                                                               2000007
000008+                                                                                                                    2000008
000009+                                                                                                                    2000009
000010+dcl-pr jwt_encodeBase64Url varchar(524284) ccsid(*utf8) extproc(*dclcase);                                          2000010
000011+  string varchar(524284) const ccsid(*utf8);                                                                        2000011
000012+end-pr;                                                                                                             2000012
000013+                                                                                                                    2000013
000014+dcl-pr jwt_decodeBase64Url varchar(524284) ccsid(*utf8) extproc(*dclcase);                                          2000014
000015+  string varchar(524284) const ccsid(*utf8);                                                                        2000015
000016+end-pr;                                                                                                             2000016
000022 /include 'jwt.rpginc'                                                                                                000022
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  jwt.rpginc                                                   *                     3
        * External name  . . . . . . :  ./jwt.rpginc                                                 *                     3
        * Last change  . . . . . . . :  24-04-25  09:27:07                                           *                     3
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              3000001
000002+                                                                                                                    3000002
000003+/if defined (JWT)                                                                                                   3000003
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      5
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
            LINES EXCLUDED: 1
000005+/endif                                                                                                              3000005
000006+                                                                                                                    3000006
000007+/define JWT                                                                                                         3000007
000008+                                                                                                                    3000008
000009+///                                                                                                                 3000009
000010+// ILEastic : JWT Service Program                                                                                   3000010
000011+//                                                                                                                  3000011
000012+// This service program offers procedures for signing and verifying JWT tokens.                                     3000012
000013+//                                                                                                                  3000013
000014+// The padding character = is stripped from the end of the token.                                                   3000014
000015+//                                                                                                                  3000015
000016+// @author Mihael Schmidt                                                                                           3000016
000017+// @date   04.05.2019                                                                                               3000017
000018+// @project ILEastic                                                                                                3000018
000019+//                                                                                                                  3000019
000020+// @rev 06.06.2020 Mihael Schmidt                                                                                   3000020
000021+//      Added registered claims to token generation.                                                                3000021
000022+///                                                                                                                 3000022
000023+                                                                                                                    3000023
000024+///                                                                                                                 3000024
000025+// The available signing algorithms                                                                                 3000025
000026+///                                                                                                                 3000026
000027+dcl-c JWT_HS256 'HS256';                                                                                            3000027
000028+dcl-c JWT_HS384 'HS384';                                                                                            3000028
000029+dcl-c JWT_HS512 'HS512';                                                                                            3000029
000030+dcl-c JWT_RS256 'RS256';                                                                                            3000030
000031+dcl-c JWT_RS384 'RS384';                                                                                            3000031
000032+dcl-c JWT_RS512 'RS512';                                                                                            3000032
000033+dcl-c JWT_SIG_NONE 'none';                                                                                          3000033
000034+                                                                                                                    3000034
000035+///                                                                                                                 3000035
000036+// Template for JWT token.                                                                                          3000036
000037+///                                                                                                                 3000037
000038+dcl-s jwt_token_t varchar(65530) template;                                                                          3000038
000039+                                                                                                                    3000039
000040+///                                                                                                                 3000040
000041+// Template for the signing key used to create the token signature                                                  3000041
000042+///                                                                                                                 3000042
000043+dcl-s jwt_signKey_t varchar(1000) template;                                                                         3000043
000044+                                                                                                                    3000044
000045+///                                                                                                                 3000045
000046+// Template for registered claims. The data structure needs to be created with                                      3000046
000047+// inz(*likeds). Default values mean that the claim will not be added to the                                        3000047
000048+// token. Note: Fields are varchar, and any space will be added to the token; use                                   3000048
000049+// %trimr if you are using char variables.                                                                          3000049
000050+///                                                                                                                 3000050
000051+dcl-ds jwt_claims_t qualified template;                                                                             3000051
000052+  issuer varchar(1000) inz;                                                                                         3000052
000053+  subject varchar(1000) inz;                                                                                        3000053
000054+  audience varchar(1000) inz;                                                                                       3000054
000055+  expirationTime timestamp inz(*loval);                                                                             3000055
000056+  notBefore timestamp inz(*loval);                                                                                  3000056
000057+  issuedAt timestamp inz(*loval);                                                                                   3000057
000058+  jwtId varchar(1000) inz;                                                                                          3000058
000059+end-ds;                                                                                                             3000059
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      6
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000060+                                                                                                                    3000060
000061+///                                                                                                                 3000061
000062+// Templfate for JWT options/configuration for token verification and generation                                    3000062
000063+///                                                                                                                 3000063
000064+dcl-ds jwt_options_t qualified template;                                                                            3000064
000065+    kid char(100);                                                                                                  3000065
000066+    // We are binding the key to a fixed alg to avoid bad actors using a public key to symmetric                    3000066
000067+    // encryption to get access. https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-l                3000067
 ...   ibraries/
000068+    // This is not an implementation requirement, but we are placing this restriction for safety.                   3000068
000069+    alg char(100);                                                                                                  3000069
000070+    key char(8192) ccsid(*hex);                                                                                     3000070
000071+    // Call back proc for token validation. The caller will have to implement                                       3000071
000072+    validate pointer(*proc);                                                                                        3000072
000073+end-ds;                                                                                                             3000073
000074+                                                                                                                    3000074
000075+///                                                                                                                 3000075
000076+// Verify token                                                                                                     3000076
000077+//                                                                                                                  3000077
000078+// Verifies the token validity. It also checks if it is expired if the token                                        3000078
000079+// contains an "exp" claim. The "exp" claim is expected to be a number                                              3000079
000080+// representing the seconds from the Unix Epoch UTC.                                                                3000080
000081+//                                                                                                                  3000081
000082+// @param Token                                                                                                     3000082
000083+// @param Options for verification                                                                                  3000083
000084+// @return <code>*on</code> = valid and not expired else <code>*off</code>                                          3000084
000085+///                                                                                                                 3000085
000086+dcl-pr jwt_verify ind extproc(*dclcase);                                                                            3000086
000087+  token like(jwt_token_t) const ccsid(*utf8);                                                                       3000087
000088+  options likeDs(jwt_options_t) const;                                                                              3000088
000089+end-pr;                                                                                                             3000089
000090+                                                                                                                    3000090
000091+///                                                                                                                 3000091
000092+// Decode header                                                                                                    3000092
000093+//                                                                                                                  3000093
000094+// Returns the decoded header from the passed token.                                                                3000094
000095+//                                                                                                                  3000095
000096+// @param Token                                                                                                     3000096
000097+// @return Decoded header                                                                                           3000097
000098+///                                                                                                                 3000098
000099+dcl-pr jwt_decodeHeader like(jwt_token_t) ccsid(*utf8) extproc(*dclcase);                                           3000099
000100+  token like(jwt_token_t) const ccsid(*utf8);                                                                       3000100
000101+end-pr;                                                                                                             3000101
000102+                                                                                                                    3000102
000103+///                                                                                                                 3000103
000104+// Decode payload                                                                                                   3000104
000105+//                                                                                                                  3000105
000106+// Returns the decoded payload from the passed token.                                                               3000106
000107+//                                                                                                                  3000107
000108+// @param Token                                                                                                     3000108
000109+// @return Decoded payload                                                                                          3000109
000110+///                                                                                                                 3000110
000111+dcl-pr jwt_decodePayload like(jwt_token_t) ccsid(*utf8) extproc(*dclcase);                                          3000111
000112+  token like(jwt_token_t) const ccsid(*utf8);                                                                       3000112
000113+end-pr;                                                                                                             3000113
000114+                                                                                                                    3000114
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      7
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000115+///                                                                                                                 3000115
000116+// Create JWT token                                                                                                 3000116
000117+//                                                                                                                  3000117
000118+// Creates a JWT token by creating a signature from the header + payload with                                       3000118
000119+// the passed signing key. The header will be generated by this procedure. Only                                     3000119
000120+// the payload needs to be passed. If the claims data structure is passed then                                      3000120
000121+// every non-default value will be added to the token payload.                                                      3000121
000122+//                                                                                                                  3000122
000123+// @param Algorithm (f. e. JWT_HS256)                                                                               3000123
000124+// @param Payload                                                                                                   3000124
000125+// @param Signing key (it has to be of a valid length corresponding to the                                          3000125
000126+//        selected algorithm (HS256 => 256 key = char(32))                                                          3000126
000127+// @param Registered claims                                                                                         3000127
000128+// @return Signed token                                                                                             3000128
000129+//                                                                                                                  3000129
000130+// @info At the moment only HS256 is supported for signature creation.                                              3000130
000131+///                                                                                                                 3000131
000132+dcl-pr jwt_sign like(jwt_token_t) ccsid(*utf8) extproc(*dclcase);                                                   3000132
000133+  algorithm char(100) const;                                                                                        3000133
000134+  payload like(jwt_token_t) const ccsid(*utf8);                                                                     3000134
000135+  options likeds(jwt_options_t) const;                                                                              3000135
000136+  claims likeds(jwt_claims_t) const options(*nopass);                                                               3000136
000137+end-pr;                                                                                                             3000137
000138+                                                                                                                    3000138
000139+///                                                                                                                 3000139
000140+// Check token expiration                                                                                           3000140
000141+//                                                                                                                  3000141
000142+// Checks if the token is expired. If the token contains no "exp" claim the                                         3000142
000143+// token is has not expired.                                                                                        3000143
000144+//                                                                                                                  3000144
000145+// @param Payload                                                                                                   3000145
000146+// @return *on = token has expired else *off                                                                        3000146
000147+///                                                                                                                 3000147
000148+dcl-pr jwt_isExpired ind extproc(*dclcase);                                                                         3000148
000149+  payload like(jwt_token_t) const ccsid(*utf8);                                                                     3000149
000150+end-pr;                                                                                                             3000150
000023 /include 'hmac.rpginc'                                                                                               000023
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  hmac.rpgi+                                                   *                     4
        * External name  . . . . . . :  ./hmac.rpginc                                                *                     4
        * Last change  . . . . . . . :  23-12-17  09:43:56                                           *                     4
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              4000001
000002+                                                                                                                    4000002
000003+/if defined (JWT_HMAC)                                                                                              4000003
            LINES EXCLUDED: 1
000005+/endif                                                                                                              4000005
000006+                                                                                                                    4000006
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      8
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000007+/define JWT_HMAC                                                                                                    4000007
000008+                                                                                                                    4000008
000009+/include 'jwt.rpginc'                                                                                               4000009
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  jwt.rpginc                                                   *                     5
        * External name  . . . . . . :  ./jwt.rpginc                                                 *                     5
        * Last change  . . . . . . . :  24-04-25  09:27:07                                           *                     5
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              5000001
000002+                                                                                                                    5000002
000003+/if defined (JWT)                                                                                                   5000003
000004+/eof                                                                                                                5000004
000010+                                                                                                                    4000010
000011+dcl-pr jwt_hmac_encode like(jwt_token_t) ccsid(*utf8) extproc(*dclcase);                                            4000011
000012+  algorithm varchar(100) const;                                                                                     4000012
000013+  data like(jwt_token_t) const ccsid(*utf8);                                                                        4000013
000014+  signKey like(jwt_signKey_t) const ccsid(*utf8);                                                                   4000014
000015+end-pr;                                                                                                             4000015
000024 /include 'rsa.rpginc'                                                                                                000024
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  rsa.rpginc                                                   *                     6
        * External name  . . . . . . :  ./rsa.rpginc                                                 *                     6
        * Last change  . . . . . . . :  24-04-25  07:52:06                                           *                     6
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              6000001
000002+                                                                                                                    6000002
000003+/if defined (JWT_RSA)                                                                                               6000003
            LINES EXCLUDED: 1
000005+/endif                                                                                                              6000005
000006+                                                                                                                    6000006
000007+/define JWT_RSA                                                                                                     6000007
000008+                                                                                                                    6000008
000009+/include 'jwt.rpginc'                                                                                               6000009
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  jwt.rpginc                                                   *                     7
        * External name  . . . . . . :  ./jwt.rpginc                                                 *                     7
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page      9
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        * Last change  . . . . . . . :  24-04-25  09:27:07                                           *                     7
        *--------------------------------------------------------------------------------------------*
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000001+**FREE                                                                                                              7000001
000002+                                                                                                                    7000002
000003+/if defined (JWT)                                                                                                   7000003
000004+/eof                                                                                                                7000004
000010+                                                                                                                    6000010
000011+dcl-pr jwt_rsa_verify ind extproc(*dclcase);                                                                        6000011
000012+  algorithm varchar(100) const;                                                                                     6000012
000013+  data like(jwt_token_t) const ccsid(*hex);                                                                         6000013
000014+  publicKey like(jwt_signKey_t) const ccsid(*utf8);                                                                 6000014
000015+end-pr;                                                                                                             6000015
000016+                                                                                                                    6000016
000017+dcl-pr jwt_rsa_sign like(jwt_token_t) ccsid(*utf8) extproc(*dclcase);                                               6000017
000018+  algorithm varchar(100) const;                                                                                     6000018
000019+  data like(jwt_token_t) const ccsid(*hex);                                                                         6000019
000020+  privateKey like(jwt_signKey_t) const ccsid(*hex);                                                                 6000020
000021+end-pr;                                                                                                             6000021
000025 /include 'noxDB/headers/jsonparser.rpgle'                                                                            000025
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
        *--------------------------------------------------------------------------------------------*
        * RPG member name  . . . . . :  jsonparse+                                                   *                     8
        * External name  . . . . . . :  ../../noxDB/headers/jsonparser.rpgle                         *                     8
        * Last change  . . . . . . . :  23-08-06  09:55:37                                           *                     8
        *--------------------------------------------------------------------------------------------*
000001+   //---------------------------------------------------------------------- *                                       8000001
000002+   //This is the prototype for BlueSeries/IceBreak - JSON and XML parser                                            8000002
000003+   //Use the JSONXML binddir when creating your program and include this                                            8000003
000004+   //prototypes like:                                                                                               8000004
000005+                                                                                                                    8000005
000006+   //H BNDDIR('JSONPARSER')                                                                                         8000006
000007+   ///include jsonParser                                                                                            8000007
000008+                                                                                                                    8000008
000009+   //Or                                                                                                             8000009
000010+                                                                                                                    8000010
000011+   //H BNDDIR('XMLPARSER')                                                                                          8000011
000012+   ///include xmlParser                                                                                             8000012
000013+                                                                                                                    8000013
000014+   //Note: Both XMLPARSER and JSONPARSER headers are autogenerated from                                             8000014
000015+   //the JSONXML header. so please do not make any changes th there headerfi                                        8000015
000016+                                                                                                                    8000016
000017+   //Note: all binddirectories JSONPARSER, XMLPARSER and JSONXML is the same                                        8000017
000018+   //---------------------------------------------------------------------- *                                       8000018
000019+ /if defined( json_DEF)                                                                                             8000019
            LINES EXCLUDED: 1
000021+ /endif                                                                                                             8000021
000022+ /define  json_DEF                                                                                                  8000022
000023+   //---------------------------------------------------------------------- *                                       8000023
000024+   //Before starting that parser - to enshure right enterpretations of delimi                                       8000024
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     10
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000025+   //Usage:                                                                                                         8000025
000026+   //jx_setDelimiters( json_DELIMITERS);                                                                            8000026
000027+   //--------------------------------------------------------------------- *                                        8000027
000028+   //get delimiter pointer                                                                                          8000028
000029+   Dcl-PR json_getDelimiters Pointer extproc(*CWIDEN :'jx_GetDelimiters');                                          8000029
000030+   End-PR;                                                                                                          8000030
000031+   //Set delimiter used for locate expression                                                                       8000031
000032+   Dcl-PR json_setDelimiters  extproc(*CWIDEN :'jx_SetDelimiters2');                                                8000032
000033+     //always: '/\@[] .{}' in your  local CCSID                                                                     8000033
000034+     delimiterStr   Pointer    value options(*string);                                                              8000034
000035+   End-PR;                                                                                                          8000035
000036+                                                                                                                    8000036
000037+   Dcl-C json_DELIMITERS const('/\@[] .{}''"$');                                                                    8000037
000038+                                                                                                                    8000038
000039+   //---------------------------------------------------------------------- *                                       8000039
000040+   //Type of a node:                                                                                                8000040
000041+   //---------------------------------------------------------------------- *                                       8000041
000042+   Dcl-C json_UNKNOWN const(0);                                                                                     8000042
000043+   Dcl-C json_OBJECT  const(1);                                                                                     8000043
000044+   Dcl-C json_ARRAY   const(2);                                                                                     8000044
000045+   Dcl-C json_EVAL    const(3);                                                                                     8000045
000046+   Dcl-C json_POINTER_VALUE const(4);                                                                               8000046
000047+   Dcl-C json_VALUE   const(5);                                                                                     8000047
000048+   Dcl-C json_ROOT    const(6);                                                                                     8000048
000049+   Dcl-C json_LITERAL const(16);                                                                                    8000049
000050+   Dcl-C json_OBJLINK const(17);                                                                                    8000050
000051+   Dcl-C json_OBJREPLACE const(18);                                                                                 8000051
000052+   Dcl-C json_OBJCOPY const(18);                                                                                    8000052
000053+   Dcl-C json_BY_CONTEXT const(19);                                                                                 8000053
000054+   Dcl-C json_OBJMOVE const(2048);                                                                                  8000054
000055+                                                                                                                    8000055
000056+   //* Modifiers to "add" / "or" into "parseString" and "evaluate"                                                  8000056
000057+   //!! Type - have to be backwards compat.                                                                         8000057
000058+   //Unlink the source and move it to dest.                                                                         8000058
000059+   Dcl-C json_MOVE_MODES const(2048);                                                                               8000059
000060+   //Allow strings ints and other values to                                                                         8000060
000061+   Dcl-C json_ALLOW_PRIMITIVES const(4096);                                                                         8000061
000062+                                                                                                                    8000062
000063+   //* Combinations:                                                                                                8000063
000064+   //JX_PARSE  = json_EVAL + json_MOVE_NODES                                                                        8000064
000065+   Dcl-C json_PARSE   const(2051);                                                                                  8000065
000066+                                                                                                                    8000066
000067+   //Merge options:                                                                                                 8000067
000068+   //Modifiers to "add" / "or" into "JSON_EVAL"                                                                     8000068
000069+ /if not defined(MO_MERGE)                                                                                          8000069
000070+ /define  MO_MERGE                                                                                                  8000070
000071+   //Only new elements are merged - existing                                                                        8000071
000072+   //are left untouched                                                                                             8000072
000073+   Dcl-C MO_MERGE_NEW const(256);                                                                                   8000073
000074+   //Merge and replace only existing nodes.                                                                         8000074
000075+   Dcl-C MO_MERGE_MATCH const(512);                                                                                 8000075
000076+   //Merge all: replace if it exists and                                                                            8000076
000077+   //append new nodes if not exists                                                                                 8000077
000078+   Dcl-C MO_MERGE_REPLACE const(1024 );                                                                             8000078
000079+ /endif                                                                                                             8000079
000080+                                                                                                                    8000080
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     11
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000081+   Dcl-C json_CHILD_LIST const('[0]');                                                                              8000081
000082+                                                                                                                    8000082
000083+   //---------------------------------------------------------------------- *                                       8000083
000084+   //Returns node to the json_object tree                                                                           8000084
000085+   Dcl-PR json_ParseFile Pointer extproc(*CWIDEN:'jx_ParseFile');                                                   8000085
000086+     //File to parse                                                                                                8000086
000087+     FileName       Pointer    value options(*string);                                                              8000087
000088+     //Parsing options                                                                                              8000088
000089+     Options        Pointer    value options(*string:*nopass);                                                      8000089
000090+   End-PR;                                                                                                          8000090
000091+                                                                                                                    8000091
000092+   //Returns node json_object tree                                                                                  8000092
000093+   Dcl-PR json_ParseString Pointer extproc(*CWIDEN:'jx_ParseString');                                               8000093
000094+     //String to parse                                                                                              8000094
000095+     String         Pointer    value options(*string);                                                              8000095
000096+     //Parsing options                                                                                              8000096
000097+     Options        Pointer    value options(*string:*nopass);                                                      8000097
000098+   End-PR;                                                                                                          8000098
000099+                                                                                                                    8000099
000100+   //Returns node json_object tree, ccsid of the string is given                                                    8000100
000101+   Dcl-PR  json_ParseStringCcsid Pointer                                                                            8000101
000102+           extproc(*CWIDEN:'jx_parseStringCcsid');                                                                  8000102
000103+     //String to parse                                                                                              8000103
000104+     String         Pointer    value options(*string);                                                              8000104
000105+     // The ccsid of the string                                                                                     8000105
000106+     ccsid          int(10) value;                                                                                  8000106
000107+   End-PR;                                                                                                          8000107
000108+                                                                                                                    8000108
000109+   //Set , or . for numeri decimal point                                                                            8000109
000110+   Dcl-PR json_setDecPoint  extproc(*CWIDEN : 'jx_SetDecPoint');                                                    8000110
000111+     //decimal point char                                                                                           8000111
000112+     decPoint       Pointer    value options(*string);                                                              8000112
000113+   End-PR;                                                                                                          8000113
000114+                                                                                                                    8000114
000115+   // Set the delimiters for the selectors to the charset of the program source                                     8000115
000116+   Dcl-PR  json_setDelimitersByCcsid                                                                                8000116
000117+           extproc(*CWIDEN : 'jx_setDelimitersByCcsid');                                                            8000117
000118+     // The ccsid of your program source                                                                            8000118
000119+     ccsid          int(10) value;                                                                                  8000119
000120+   End-PR;                                                                                                          8000120
000121+                                                                                                                    8000121
000122+                                                                                                                    8000122
000123+   //Bool true if errors occures                                                                                    8000123
000124+   Dcl-PR json_Error Ind extproc(*CWIDEN:'jx_Error');                                                               8000124
000125+     //jx_Object  node                                                                                              8000125
000126+     pNode          Pointer    value;                                                                               8000126
000127+   End-PR;                                                                                                          8000127
000128+                                                                                                                    8000128
000129+   //Return error description                                                                                       8000129
000130+   Dcl-PR json_Message Varchar(1024) extproc(*CWIDEN:'jx_Message');                                                 8000130
000131+     //jx_Object for a spcific object (*NULL or ommit if just last message)                                         8000131
000132+     pNode          Pointer    value options(*nopass);                                                              8000132
000133+   End-PR;                                                                                                          8000133
000134+                                                                                                                    8000134
000135+   // Without parameters you will get the last internal error                                                       8000135
000136+   // Otherwise it will format an error object                                                                      8000136
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     12
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000137+   Dcl-PR json_GetMessageObject Pointer //Return error description                                                  8000137
000138+                              extproc(*CWIDEN:'jx_GetMessageObject');                                               8000138
000139+     MessageId      Pointer    value options(*string:*nopass);                                                      8000139
000140+     MessageData    Pointer    value options(*string:*nopass);                                                      8000140
000141+   End-PR;                                                                                                          8000141
000142+                                                                                                                    8000142
000143+   // simple courtesy function to return a {"success":true} object                                                  8000143
000144+   //Return success:true object                                                                                     8000144
000145+   Dcl-PR json_SuccessTrue Pointer extproc(*CWIDEN:'jx_SuccessTrue');                                               8000145
000146+     MessageId      Pointer    value options(*string:*nopass);                                                      8000146
000147+     MessageData    Pointer    value options(*string:*nopass);                                                      8000147
000148+   End-PR;                                                                                                          8000148
000149+                                                                                                                    8000149
000150+   //Returns pointer to node                                                                                        8000150
000151+   Dcl-PR json_Locate Pointer extproc(*CWIDEN : 'jx_GetNode');                                                      8000151
000152+     //Pointer to tree or node                                                                                      8000152
000153+     pNode          Pointer    value;                                                                               8000153
000154+     //location expression                                                                                          8000154
000155+     Expression     Pointer    value options(*string);                                                              8000155
000156+   End-PR;                                                                                                          8000156
000157+                                                                                                                    8000157
000158+   //Returns pointer to node                                                                                        8000158
000159+   Dcl-PR json_LocateOrCreate Pointer                                                                               8000159
000160+                            extproc(*CWIDEN : 'jx_GetOrCreateNode');                                                8000160
000161+     //Pointer to tree or node                                                                                      8000161
000162+     pNode          Pointer    value;                                                                               8000162
000163+     //location expression                                                                                          8000163
000164+     Expression     Pointer    value options(*string);                                                              8000164
000165+   End-PR;                                                                                                          8000165
000166+                                                                                                                    8000166
000167+   //Returns 'ON' if node exists                                                                                    8000167
000168+   Dcl-PR json_Has Ind extproc(*CWIDEN : 'jx_Has');                                                                 8000168
000169+     //Pointer to tree or node                                                                                      8000169
000170+     pNode          Pointer    value;                                                                               8000170
000171+     //Path to node                                                                                                 8000171
000172+     NodeName       Pointer    value options(*string);                                                              8000172
000173+   End-PR;                                                                                                          8000173
000174+                                                                                                                    8000174
000175+   //Returns 'ON' if node exists and has <> 0                                                                       8000175
000176+   Dcl-PR json_isTrue Ind extproc(*CWIDEN : 'jx_IsTrue');                                                           8000176
000177+     //Pointer to tree or node                                                                                      8000177
000178+     pNode          Pointer    value;                                                                               8000178
000179+     //Path to node                                                                                                 8000179
000180+     NodeName       Pointer    value options(*string);                                                              8000180
000181+   End-PR;                                                                                                          8000181
000182+                                                                                                                    8000182
000183+   //Returns 'ON' if node is literals                                                                               8000183
000184+   Dcl-PR json_IsLiteral Ind extproc(*CWIDEN : 'jx_IsLiteral');                                                     8000184
000185+     //Pointer to tree or node                                                                                      8000185
000186+     pNode          Pointer    value;                                                                               8000186
000187+   End-PR;                                                                                                          8000187
000188+                                                                                                                    8000188
000189+   //Returns 'ON' if node exists and has <> 0                                                                       8000189
000190+   Dcl-PR json_isNull Ind extproc(*CWIDEN : 'jx_IsNull');                                                           8000190
000191+     //Pointer to tree or node                                                                                      8000191
000192+     pNode          Pointer    value;                                                                               8000192
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     13
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000193+     //Path to node                                                                                                 8000193
000194+     NodeName       Pointer    value options(*string);                                                              8000194
000195+   End-PR;                                                                                                          8000195
000196+                                                                                                                    8000196
000197+   //Returns 'ON' if it is a valid node                                                                             8000197
000198+   Dcl-PR json_isNode Ind extproc(*CWIDEN : 'jx_isNode');                                                           8000198
000199+     //a.k.a. false for strings                                                                                     8000199
000200+     pNode          Pointer    value;                                                                               8000200
000201+   End-PR;                                                                                                          8000201
000202+                                                                                                                    8000202
000203+   //renames the node name                                                                                          8000203
000204+   Dcl-PR json_NodeRename Ind extproc(*CWIDEN : 'jx_NodeRename');                                                   8000204
000205+     //Pointer to tree or node                                                                                      8000205
000206+     pNode          Pointer    value;                                                                               8000206
000207+     //Path to node                                                                                                 8000207
000208+     NodeName       Pointer    value options(*string);                                                              8000208
000209+   End-PR;                                                                                                          8000209
000210+                                                                                                                    8000210
000211+   //Returns pointer to next sibling (elem)                                                                         8000211
000212+   Dcl-PR json_GetNext Pointer extproc(*CWIDEN : 'jx_GetNodeNext');                                                 8000212
000213+     //Pointer to current node (elem)                                                                               8000213
000214+     pNode          Pointer    value;                                                                               8000214
000215+   End-PR;                                                                                                          8000215
000216+                                                                                                                    8000216
000217+   //Returns pointer to first child (elem)                                                                          8000217
000218+   Dcl-PR json_GetChild Pointer extproc(*CWIDEN : 'jx_GetNodeChild');                                               8000218
000219+     //Pointer to current node (elem)                                                                               8000219
000220+     pNode          Pointer    value;                                                                               8000220
000221+   End-PR;                                                                                                          8000221
000222+                                                                                                                    8000222
000223+   //Returns pointer to parent node                                                                                 8000223
000224+   Dcl-PR json_GetParent Pointer extproc(*CWIDEN : 'jx_GetNodeParent');                                             8000224
000225+     //Pointer to current node (elem)                                                                               8000225
000226+     pNode          Pointer    value;                                                                               8000226
000227+   End-PR;                                                                                                          8000227
000228+                                                                                                                    8000228
000229+   // Create or replace a node with no value ( null value)                                                          8000229
000230+   Dcl-PR json_SetNull Pointer extproc(*CWIDEN: 'jx_SetNullByName');                                                8000230
000231+     //Pointer to json_ tree                                                                                        8000231
000232+     pNode          Pointer    value;                                                                               8000232
000233+     //Location expression to node or attributes                                                                    8000233
000234+     Expresion      Pointer    value options(*string);                                                              8000234
000235+   End-PR;                                                                                                          8000235
000236+                                                                                                                    8000236
000237+   Dcl-PR json_SetEval pointer extproc(*CWIDEN:'jx_SetEvalByName');                                                 8000237
000238+     pNode          Pointer    value;                                                                               8000238
000239+     Expresion      Pointer    value options(*string);                                                              8000239
000240+     Value          Pointer    value options(*string);                                                              8000240
000241+   End-PR;                                                                                                          8000241
000242+                                                                                                                    8000242
000243+   Dcl-PR json_SetStr Pointer extproc(*CWIDEN: 'jx_SetStrByName');                                                  8000243
000244+     //Pointer to json_ tree                                                                                        8000244
000245+     pNode          Pointer    value;                                                                               8000245
000246+     //Location expression to node or attributes                                                                    8000246
000247+     Expresion      Pointer    value options(*string);                                                              8000247
000248+     //New value to set / pointer to object                                                                         8000248
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     14
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000249+     Value          Pointer    value options(*string);                                                              8000249
000250+   End-PR;                                                                                                          8000250
000251+                                                                                                                    8000251
000252+   Dcl-PR json_SetInt Pointer extproc(*CWIDEN: 'jx_SetIntByName');                                                  8000252
000253+     //Pointer to json_ tree                                                                                        8000253
000254+     pNode          Pointer    value;                                                                               8000254
000255+     //Location expression to node or attributes                                                                    8000255
000256+     Expresion      Pointer    value options(*string);                                                              8000256
000257+     //New value to set / pointer to object                                                                         8000257
000258+     Value          Int(10)    value;                                                                               8000258
000259+   End-PR;                                                                                                          8000259
000260+                                                                                                                    8000260
000261+   Dcl-PR json_SetNum Pointer extproc(*CWIDEN: 'jx_SetDecByName');                                                  8000261
000262+     //Pointer to json_ tree                                                                                        8000262
000263+     pNode          Pointer    value;                                                                               8000263
000264+     //Location expression to node or attributes                                                                    8000264
000265+     Expresion      Pointer    value options(*string);                                                              8000265
000266+     //New value to set / pointer to object                                                                         8000266
000267+     Value          Packed(30:15) value;                                                                            8000267
000268+   End-PR;                                                                                                          8000268
000269+                                                                                                                    8000269
000270+   Dcl-PR json_SetBool Pointer extproc(*CWIDEN: 'jx_SetBoolByName');                                                8000270
000271+     //Pointer to json_ tree                                                                                        8000271
000272+     pNode          Pointer    value;                                                                               8000272
000273+     //Location expression to node or attributes                                                                    8000273
000274+     Expresion      Pointer    value options(*string);                                                              8000274
000275+     //New value to set / pointer to object                                                                         8000275
000276+     Value          Ind        value;                                                                               8000276
000277+   End-PR;                                                                                                          8000277
000278+                                                                                                                    8000278
000279+   Dcl-PR json_SetDate Pointer extproc(*CWIDEN: 'jx_SetDateByName');                                                8000279
000280+     //Pointer to json_ tree                                                                                        8000280
000281+     pNode          Pointer    value;                                                                               8000281
000282+     //Location expression to node or attributes                                                                    8000282
000283+     Expresion      Pointer    value options(*string);                                                              8000283
000284+     //New value to set / pointer to object                                                                         8000284
000285+     Value          date(*ISO)  const;                                                                              8000285
000286+   End-PR;                                                                                                          8000286
000287+                                                                                                                    8000287
000288+   Dcl-PR json_SetTime Pointer extproc(*CWIDEN: 'jx_SetTimeByName');                                                8000288
000289+     //Pointer to json_ tree                                                                                        8000289
000290+     pNode          Pointer    value;                                                                               8000290
000291+     //Location expression to node or attributes                                                                    8000291
000292+     Expresion      Pointer    value options(*string);                                                              8000292
000293+     //New value to set / pointer to object                                                                         8000293
000294+     Value          time(*ISO)   const;                                                                             8000294
000295+   End-PR;                                                                                                          8000295
000296+                                                                                                                    8000296
000297+   Dcl-PR json_SetTimeStamp Pointer                                                                                 8000297
000298+                          extproc(*CWIDEN: 'jx_SetTimeStampByName');                                                8000298
000299+     //Pointer to json_ tree                                                                                        8000299
000300+     pNode          Pointer    value;                                                                               8000300
000301+     //Location expression to node or attributes                                                                    8000301
000302+     Expresion      Pointer    value options(*string);                                                              8000302
000303+     //New value to set / pointer to object                                                                         8000303
000304+     Value          timestamp  const;                                                                               8000304
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     15
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000305+   End-PR;                                                                                                          8000305
000306+                                                                                                                    8000306
000307+                                                                                                                    8000307
000308+   Dcl-PR json_SetPtr Pointer extproc(*CWIDEN: 'jx_SetPtrByName');                                                  8000308
000309+     //Pointer to json_ tree                                                                                        8000309
000310+     pNode          Pointer    value;                                                                               8000310
000311+     //Location expression to node or attributes                                                                    8000311
000312+     Expresion      Pointer    value options(*string);                                                              8000312
000313+     //Pointer to anything - You do the cleanup                                                                     8000313
000314+     Value          Pointer    value;                                                                               8000314
000315+     //*ON=Pointer string and stringify, *OFF= Contents is already formated JSON (Default)                          8000315
000316+     Stringify      Ind        value options(*nopass);                                                              8000316
000317+   End-PR;                                                                                                          8000317
000318+                                                                                                                    8000318
000319+   Dcl-PR json_SetProcPtr Pointer extproc(*CWIDEN: 'jx_SetPtrByName');                                              8000319
000320+     pNode          Pointer    value; //Pointer to json_ tree                                                       8000320
000321+     //Location expression to node or attributes                                                                    8000321
000322+     Expresion      Pointer    value options(*string);                                                              8000322
000323+     Proc           Pointer(*Proc); //Pointer to a procedure                                                        8000323
000324+     //*ON=String escape, *OFF=If literals                                                                          8000324
000325+     isString       Ind        value options(*nopass);                                                              8000325
000326+   End-PR;                                                                                                          8000326
000327+                                                                                                                    8000327
000328+   //         /IF DEFINED(*V7R4M0)                                                                                  8000328
000329+   //           Dcl-PR json_Set Pointer overload (                                                                  8000329
000330+   //             json_SetBool :                                                                                    8000330
000331+   //             json_SetNum :                                                                                     8000331
000332+   //             json_SetInt :                                                                                     8000332
000333+   //             json_SetDate:                                                                                     8000333
000334+   //             json_SetTime:                                                                                     8000334
000335+   //             json_SetTimeStamp:                                                                                8000335
000336+   //             json_SetStr                                                                                       8000336
000337+   //           );                                                                                                  8000337
000338+   //         /ENDIF                                                                                                8000338
000339+                                                                                                                    8000339
000340+   Dcl-PR json_SetValue Pointer extproc(*CWIDEN: 'jx_SetValueByName');                                              8000340
000341+     //Pointer to json_ tree                                                                                        8000341
000342+     pNode          Pointer    value;                                                                               8000342
000343+     //Location expression to node or attributes                                                                    8000343
000344+     Expresion      Pointer    value options(*string);                                                              8000344
000345+     //New value to set / pointer to object                                                                         8000345
000346+     Value          Pointer    value options(*string:*nopass);                                                      8000346
000347+     //Optional new type (Refer "node type"                                                                         8000347
000348+     Type           Uns(5)     value options(*nopass);                                                              8000348
000349+   End-PR;                                                                                                          8000349
000350+                                                                                                                    8000350
000351+   Dcl-PR json_GetValueStr Varchar(32767)                                                                           8000351
000352+                         extproc(*CWIDEN : 'jx_GetNodeValueVC');                                                    8000352
000353+     //Pointer to node                                                                                              8000353
000354+     pNode          Pointer    value;                                                                               8000354
000355+     //If not found - default value                                                                                 8000355
000356+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000356
000357+   End-PR;                                                                                                          8000357
000358+                                                                                                                    8000358
000359+   Dcl-PR json_GetValueNum Packed(30:15)                                                                            8000359
000360+                         extproc(*CWIDEN : 'jx_GetNodeValueNum');                                                   8000360
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     16
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000361+     //Pointer to node                                                                                              8000361
000362+     pNode          Pointer    value;                                                                               8000362
000363+     //If not found - default value                                                                                 8000363
000364+     Defaultvalue   Packed(30:15) value options(*NOPASS);                                                           8000364
000365+   End-PR;                                                                                                          8000365
000366+                                                                                                                    8000366
000367+   Dcl-PR json_GetValueInt Int(20) extproc(*CWIDEN : 'jx_GetNodeValueInt');                                         8000367
000368+     pNode          Pointer    value; //Pointer to node                                                             8000368
000369+     //If not found - default value                                                                                 8000369
000370+     Defaultvalue   Int(20)    value options(*NOPASS);                                                              8000370
000371+   End-PR;                                                                                                          8000371
000372+                                                                                                                    8000372
000373+   Dcl-PR json_GetValuePtr Pointer extproc(*CWIDEN : 'jx_GetNodeValuePtr');                                         8000373
000374+     //Pointer to node                                                                                              8000374
000375+     pNode          Pointer    value;                                                                               8000375
000376+     //If not found - default value                                                                                 8000376
000377+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000377
000378+   End-PR;                                                                                                          8000378
000379+                                                                                                                    8000379
000380+   Dcl-PR json_GetName Varchar(32767)                                                                               8000380
000381+                     extproc(*CWIDEN : 'jx_GetNodeNameVC');                                                         8000381
000382+     //Pointer to node                                                                                              8000382
000383+     pNode          Pointer    value;                                                                               8000383
000384+   End-PR;                                                                                                          8000384
000385+                                                                                                                    8000385
000386+   Dcl-PR json_GetNameAsPath Varchar(32767)                                                                         8000386
000387+                           extproc(*CWIDEN : 'jx_GetNodeNameAsPath');                                               8000387
000388+     //Pointer to node                                                                                              8000388
000389+     pNode          Pointer    value;                                                                               8000389
000390+     //Delimiter like - or . or / or \                                                                              8000390
000391+     Delimiter      Char(1)    value;                                                                               8000391
000392+   End-PR;                                                                                                          8000392
000393+                                                                                                                    8000393
000394+   //* Refer to node type above                                                                                     8000394
000395+   Dcl-PR json_NodeType Int(5) extproc(*CWIDEN : 'jx_GetNodeType');                                                 8000395
000396+     //Pointer to json_ tree to receive format                                                                      8000396
000397+     pNode          Pointer    value;                                                                               8000397
000398+   End-PR;                                                                                                          8000398
000399+                                                                                                                    8000399
000400+ // Get string by expresion                                                                                         8000400
000401+ //  /object/array[123]/name                                                                                        8000401
000402+ //  .object.array[123].name                                                                                        8000402
000403+   Dcl-PR json_GetStr Varchar(32767) extproc(*CWIDEN : 'jx_GetValueVC');                                            8000403
000404+     //Pointer to relative node                                                                                     8000404
000405+     pNode          Pointer    value;                                                                               8000405
000406+     //Locations expression to node                                                                                 8000406
000407+     Expression     Pointer    value options(*string:*nopass);                                                      8000407
000408+     //If not found - default value                                                                                 8000408
000409+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000409
000410+   End-PR;                                                                                                          8000410
000411+                                                                                                                    8000411
000412+ //  will join all subsequent array nodes into one resulting string                                                 8000412
000413+   Dcl-PR json_GetStrJoin Varchar(32767)                                                                            8000413
000414+                        extproc(*CWIDEN : 'jx_GetStrJoinVC');                                                       8000414
000415+     //Pointer to relative node                                                                                     8000415
000416+     pNode          Pointer    value;                                                                               8000416
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     17
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000417+     //Locations expression to node                                                                                 8000417
000418+     Expression     Pointer    value options(*string:*nopass);                                                      8000418
000419+     //If not found - default value                                                                                 8000419
000420+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000420
000421+   End-PR;                                                                                                          8000421
000422+                                                                                                                    8000422
000423+ // Get number by expresion like:                                                                                   8000423
000424+ //  /object/array[123]/name                                                                                        8000424
000425+ //  .object.array[123].name                                                                                        8000425
000426+   Dcl-PR json_GetNum Packed(30:15) extproc(*CWIDEN : 'jx_GetValueNum');                                            8000426
000427+     //Pointer to relative node                                                                                     8000427
000428+     pNode          Pointer    value;                                                                               8000428
000429+     //Locations expression to node                                                                                 8000429
000430+     Expression     Pointer    value options(*string:*nopass);                                                      8000430
000431+     //If not found - default value                                                                                 8000431
000432+     Defaultvalue   Packed(30:15) value options(*nopass);                                                           8000432
000433+   End-PR;                                                                                                          8000433
000434+                                                                                                                    8000434
000435+   Dcl-PR json_GetInt Int(20) extproc(*CWIDEN : 'jx_GetValueInt');                                                  8000435
000436+     //Pointer to relative node                                                                                     8000436
000437+     pNode          Pointer    value;                                                                               8000437
000438+     //Locations expression to node                                                                                 8000438
000439+     Expression     Pointer    value options(*string:*nopass);                                                      8000439
000440+     //If not found - default value                                                                                 8000440
000441+     Defaultvalue   Int(20)    value options(*nopass);                                                              8000441
000442+   End-PR;                                                                                                          8000442
000443+                                                                                                                    8000443
000444+   Dcl-PR json_GetBool ind extproc(*CWIDEN : 'jx_GetValueBool');                                                    8000444
000445+     //Pointer to relative node                                                                                     8000445
000446+     pNode          Pointer    value;                                                                               8000446
000447+     //Locations expression to node                                                                                 8000447
000448+     Expression     Pointer    value options(*string:*nopass);                                                      8000448
000449+     //If not found - default value                                                                                 8000449
000450+     Defaultvalue   ind        value options(*nopass);                                                              8000450
000451+   End-PR;                                                                                                          8000451
000452+                                                                                                                    8000452
000453+   Dcl-PR json_GetDate date(*ISO)  extproc(*CWIDEN : 'jx_GetValueDate');                                            8000453
000454+     //Pointer to relative node                                                                                     8000454
000455+     pNode          Pointer    value;                                                                               8000455
000456+     //Locations expression to node                                                                                 8000456
000457+     Expression     Pointer    value options(*string:*nopass);                                                      8000457
000458+     //If not found - default value                                                                                 8000458
000459+     Defaultvalue   date(*ISO)    value options(*nopass);                                                           8000459
000460+   End-PR;                                                                                                          8000460
000461+                                                                                                                    8000461
000462+   Dcl-PR json_GetTime Time(*ISO)  extproc(*CWIDEN : 'jx_GetValueTime');                                            8000462
000463+     //Pointer to relative node                                                                                     8000463
000464+     pNode          Pointer    value;                                                                               8000464
000465+     //Locations expression to node                                                                                 8000465
000466+     Expression     Pointer    value options(*string:*nopass);                                                      8000466
000467+     //If not found - default value                                                                                 8000467
000468+     Defaultvalue   Time(*ISO)    value options(*nopass);                                                           8000468
000469+   End-PR;                                                                                                          8000469
000470+                                                                                                                    8000470
000471+   Dcl-PR json_GetTimeStamp TimeStamp                                                                               8000471
000472+                          extproc(*CWIDEN : 'jx_GetValueTimeStamp');                                                8000472
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     18
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000473+     //Pointer to relative node                                                                                     8000473
000474+     pNode          Pointer    value;                                                                               8000474
000475+     //Locations expression to node                                                                                 8000475
000476+     Expression     Pointer    value options(*string:*nopass);                                                      8000476
000477+     //If not found - default value                                                                                 8000477
000478+     Defaultvalue   TimeStamp    value options(*nopass);                                                            8000478
000479+   End-PR;                                                                                                          8000479
000480+   //Set an ILOB object to a value found by X                                                                       8000480
000481+   //Return *ON if found                                                                                            8000481
000482+   Dcl-PR json_GetIlobValue Ind extproc(*CWIDEN :'ILOB_XmlGetValue');                                               8000482
000483+     //Pointer to ILOB object to receive the va                                                                     8000483
000484+     pIlob          Pointer    value;                                                                               8000484
000485+     //Pointer to tree                                                                                              8000485
000486+     pNode          Pointer    value;                                                                               8000486
000487+     //Location expression to node or attributes                                                                    8000487
000488+     Expression     Pointer    value options(*string);                                                              8000488
000489+   End-PR;                                                                                                          8000489
000490+                                                                                                                    8000490
000491+   Dcl-PR json_CopyValue Pointer extproc(*CWIDEN : 'jx_CopyValue');                                                 8000491
000492+     //destination node                                                                                             8000492
000493+     pDest          Pointer    value;                                                                               8000493
000494+     //destiantion name (or *NULL or '')                                                                            8000494
000495+     destName       Pointer    value options(*string);                                                              8000495
000496+     //source node                                                                                                  8000496
000497+     pSource        Pointer    value;                                                                               8000497
000498+     //source name (or *NULL or '')                                                                                 8000498
000499+     sourceName     Pointer    value options(*string);                                                              8000499
000500+   End-PR;                                                                                                          8000500
000501+                                                                                                                    8000501
000502+   Dcl-PR json_NodeCopy extproc(*CWIDEN : 'jx_NodeCopy');                                                           8000502
000503+     //node. Retrive from Locate()                                                                                  8000503
000504+     pRootNode      Pointer    value;                                                                               8000504
000505+     //node. Retrive from Locate()                                                                                  8000505
000506+     pNewChild      Pointer    value;                                                                               8000506
000507+     //Reference location to where it arrive                                                                        8000507
000508+     RefLocation    Int(10)    value;                                                                               8000508
000509+   End-PR;                                                                                                          8000509
000510+                                                                                                                    8000510
000511+   //Following constants used by json_NodeCopy:RefLocation                                                          8000511
000512+   Dcl-C json_FIRST_CHILD const(1);                                                                                 8000512
000513+   Dcl-C json_LAST_CHILD const(2);                                                                                  8000513
000514+   Dcl-C json_BEFORE_SIBLING const(3);                                                                              8000514
000515+   Dcl-C json_AFTER_SIBLING const(4);                                                                               8000515
000516+                                                                                                                    8000516
000517+   Dcl-PR json_NodeClone Pointer extproc(*CWIDEN : 'jx_NodeClone');                                                 8000517
000518+     //node. Retrive from Locate()                                                                                  8000518
000519+     pSource        Pointer    value;                                                                               8000519
000520+   End-PR;                                                                                                          8000520
000521+                                                                                                                    8000521
000522+   //returns the new node                                                                                           8000522
000523+   Dcl-PR json_NodeAdd Pointer extproc(*CWIDEN : 'jx_NodeAdd');                                                     8000523
000524+     //node. Retrive from Locate()                                                                                  8000524
000525+     pRootNode      Pointer    value;                                                                               8000525
000526+     //Reference location to where it arrive                                                                        8000526
000527+     RefLocation    Int(10)    value;                                                                               8000527
000528+     //Name of node                                                                                                 8000528
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     19
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000529+     Name           Pointer    value options(*string);                                                              8000529
000530+     //Value or expression                                                                                          8000530
000531+     Value          Pointer    value options(*string);                                                              8000531
000532+     //New type (Refer "node type"                                                                                  8000532
000533+     Type           Uns(5)     value;                                                                               8000533
000534+   End-PR;                                                                                                          8000534
000535+                                                                                                                    8000535
000536+   Dcl-PR json_NodeDelete extproc(*CWIDEN : 'jx_NodeDelete');                                                       8000536
000537+     //node. Retrive from Locate()                                                                                  8000537
000538+     pRootNode      Pointer    value;                                                                               8000538
000539+   End-PR;                                                                                                          8000539
000540+                                                                                                                    8000540
000541+   //Unlink the note from its previous and promote it as a new root node                                            8000541
000542+   Dcl-PR json_NodeUnlink Pointer extproc(*CWIDEN : 'jx_NodeUnlink');                                               8000542
000543+     //Targenode. Retrive from Locate(                                                                              8000543
000544+     pNode          Pointer    value;                                                                               8000544
000545+   End-PR;                                                                                                          8000545
000546+                                                                                                                    8000546
000547+   Dcl-PR json_NodeSanitize extproc(*CWIDEN : 'jx_NodeSanitize');                                                   8000547
000548+     //node. Retrive from Locate()                                                                                  8000548
000549+     pRootNode      Pointer    value;                                                                               8000549
000550+   End-PR;                                                                                                          8000550
000551+                                                                                                                    8000551
000552+   //CheckSum of all names and values                                                                               8000552
000553+   //Delete all nodes which value are null                                                                          8000553
000554+   Dcl-PR json_NodeCheckSum Uns(10) extproc(*CWIDEN : 'jx_NodeCheckSum');                                           8000554
000555+     pRootNode      Pointer    value; //node. Retrive from Locate()                                                 8000555
000556+   End-PR;                                                                                                          8000556
000557+                                                                                                                    8000557
000558+   //returns the new node                                                                                           8000558
000559+   Dcl-PR json_NewObject Pointer extproc(*CWIDEN : 'jx_NewObject');                                                 8000559
000560+     //Destination. Retrive from Locate()                                                                           8000560
000561+     pDestNode      Pointer    value options(*nopass);                                                              8000561
000562+   End-PR;                                                                                                          8000562
000563+                                                                                                                    8000563
000564+ // Array functions                                                                                                 8000564
000565+   //returns the new node                                                                                           8000565
000566+   Dcl-PR json_NewArray Pointer extproc(*CWIDEN : 'jx_NewArray');                                                   8000566
000567+     //Destination. Retrive from Locate()                                                                           8000567
000568+     pDestNode      Pointer    value options(*nopass);                                                              8000568
000569+   End-PR;                                                                                                          8000569
000570+                                                                                                                    8000570
000571+   //returns the new node added to the end of                                                                       8000571
000572+   Dcl-PR json_ArrayPush Pointer extproc(*CWIDEN : 'jx_ArrayPush');                                                 8000572
000573+     //Destination. Retrive from Locate()                                                                           8000573
000574+     pDestArray     Pointer    value;                                                                               8000574
000575+     //source node to append                                                                                        8000575
000576+     pSourceNode    Pointer    value options(*string);                                                              8000576
000577+     //0=(Dft) Unlink and move, 1=copy a clone                                                                      8000577
000578+     copy           Uns(5)     value options(*nopass);                                                              8000578
000579+   End-PR;                                                                                                          8000579
000580+                                                                                                                    8000580
000581+   //Following constants used by json_ArrayPush:copy                                                                8000581
000582+   Dcl-C json_MOVE_UNLINK const(0);                                                                                 8000582
000583+   Dcl-C json_COPY_CLONE const(1);                                                                                  8000583
000584+                                                                                                                    8000584
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     20
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000585+   //returns the new node added to the end of                                                                       8000585
000586+   Dcl-PR json_ArrayAppend Pointer extproc(*CWIDEN :'jx_ArrayAppend');                                              8000586
000587+     //Destination. Retrive from Locate()                                                                           8000587
000588+     pDestArray     Pointer    value;                                                                               8000588
000589+     //source node to append                                                                                        8000589
000590+     pSourceNode    Pointer    value options(*string);                                                              8000590
000591+     //0=(Dft) Unlink and move, 1=copy a clone                                                                      8000591
000592+     copy           Uns(5)     value options(*nopass);                                                              8000592
000593+   End-PR;                                                                                                          8000593
000594+                                                                                                                    8000594
000595+   //returns the new array fro source array                                                                         8000595
000596+   Dcl-PR json_ArraySlice Pointer extproc(*CWIDEN : 'jx_ArraySlice' );                                              8000596
000597+     //source node or array string                                                                                  8000597
000598+     pSourceNode    Pointer    value options(*string);                                                              8000598
000599+     //From entry ( 1=First)                                                                                        8000599
000600+     from           Int(10)    value;                                                                               8000600
000601+     //To and includ   (-1 = Until end)                                                                             8000601
000602+     to             Int(10)    value;                                                                               8000602
000603+     //0=(Dft) Unlink and move, 1=copy a clone                                                                      8000603
000604+     copy           Uns(5)     value options(*nopass);                                                              8000604
000605+   End-PR;                                                                                                          8000605
000606+                                                                                                                    8000606
000607+   //returns the new node added to the end of                                                                       8000607
000608+   Dcl-PR json_ArraySort Pointer extproc(*CWIDEN : 'jx_ArraySort');                                                 8000608
000609+     //Destination. Retrive from Locate()                                                                           8000609
000610+     pArray         Pointer    value;                                                                               8000610
000611+     //nodenames if any in subobject to comapre                                                                     8000611
000612+     pkeyNames      Pointer    value options(*string) ;                                                             8000612
000613+     //0=(Dft) use json numerics, 1=Use locale                                                                      8000613
000614+     options        uns(5)     value options(*nopass);                                                              8000614
000615+   End-PR;                                                                                                          8000615
000616+                                                                                                                    8000616
000617+   Dcl-C json_USE_LOCALE const(1);                                                                                  8000617
000618+                                                                                                                    8000618
000619+   //returns the first node with expr value                                                                         8000619
000620+   Dcl-PR json_LookupValue Pointer extproc(*CWIDEN : 'jx_lookupValue');                                             8000620
000621+     //Array/ obj to search                                                                                         8000621
000622+     pArray         Pointer    value;                                                                               8000622
000623+     //What to search for                                                                                           8000623
000624+     expr           Pointer    value options(*string);                                                              8000624
000625+     //0=(Dft) Same case, 1=ignore case                                                                             8000625
000626+     ignoreCase     Uns(5)     value options(*nopass);                                                              8000626
000627+   End-PR;                                                                                                          8000627
000628+                                                                                                                    8000628
000629+   //Following constants used by json_LookupValue:ignoreCase                                                        8000629
000630+   Dcl-C json_SAME_CASE const(0);                                                                                   8000630
000631+   Dcl-C json_IGNORE_CASE const(1);                                                                                 8000631
000632+                                                                                                                    8000632
000633+   //returns numer of element in array or obj                                                                       8000633
000634+   Dcl-PR json_GetLength Int(10) extproc(*CWIDEN : 'jx_getLength'  );                                               8000634
000635+     //Array to count length                                                                                        8000635
000636+     pArray         Pointer    value;                                                                               8000636
000637+   End-PR;                                                                                                          8000637
000638+                                                                                                                    8000638
000639+   //returns the new node                                                                                           8000639
000640+   Dcl-PR json_Merge Pointer extproc(*CWIDEN : 'jx_NodeMerge');                                                     8000640
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     21
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000641+     //Destination. Retrive from Locate()                                                                           8000641
000642+     pDestNode      Pointer    value;                                                                               8000642
000643+     //Source tree  Retrive from Locate()                                                                           8000643
000644+     pSourceNode    Pointer    value;                                                                               8000644
000645+     //Optional new type                                                                                            8000645
000646+     Type           Uns(5)     value options(*nopass);                                                              8000646
000647+   End-PR;                                                                                                          8000647
000648+                                                                                                                    8000648
000649+   //Following constants used by json_Merge:Type                                                                    8000649
000650+   Dcl-C json_DONTREPLACE const(0);                                                                                 8000650
000651+   Dcl-C json_REPLACE const(1);                                                                                     8000651
000652+                                                                                                                    8000652
000653+   //returns the new node                                                                                           8000653
000654+   Dcl-PR json_MergeObjects Pointer extproc(*CWIDEN : 'jx_MergeObjects');                                           8000654
000655+     //Destination. Retrive from Locate()                                                                           8000655
000656+     pDestObj       Pointer    value;                                                                               8000656
000657+     //Source tree  Retrive from Locate()                                                                           8000657
000658+     pSourceObj     Pointer    value;                                                                               8000658
000659+     //JX_DONTREPLACE or json_OBJREPLACE                                                                            8000659
000660+     Type           Uns(5)     value;                                                                               8000660
000661+   End-PR;                                                                                                          8000661
000662+                                                                                                                    8000662
000663+   //returns the source node                                                                                        8000663
000664+   Dcl-PR json_MoveObjectInto Pointer extproc(*CWIDEN : 'jx_NodeMoveInto');                                         8000664
000665+     //Destination. Retrive from Locate()                                                                           8000665
000666+     pDestObj       Pointer    value;                                                                               8000666
000667+     Name           Pointer    value options(*string);                                                              8000667
000668+     //Source tree  Retrive from Locate()                                                                           8000668
000669+     pSourceObj     Pointer    value;                                                                               8000669
000670+   End-PR;                                                                                                          8000670
000671+                                                                                                                    8000671
000672+   Dcl-PR json_Dump  extproc(*CWIDEN : 'jx_Dump');                                                                  8000672
000673+     //Pointer to tree                                                                                              8000673
000674+     pNode          Pointer    value;                                                                               8000674
000675+   End-PR;                                                                                                          8000675
000676+                                                                                                                    8000676
000677+                                                                                                                    8000677
000678+   Dcl-PR json_CloneFormat  extproc(*CWIDEN : 'jx_CloneFormat');                                                    8000678
000679+     //Pointer to tree to receive format                                                                            8000679
000680+     pNode          Pointer    value;                                                                               8000680
000681+     //node ptr or path with right formating                                                                        8000681
000682+     pCloneFrom     Pointer    value options(*string);                                                              8000682
000683+   End-PR;                                                                                                          8000683
000684+                                                                                                                    8000684
000685+   //**  JSON renderes ***                                                                                          8000685
000686+   Dcl-PR json_WriteJsonStmf  extproc(*CWIDEN : 'jx_WriteJsonStmf');                                                8000686
000687+     //node. Retrive from Locate()                                                                                  8000687
000688+     pNode          Pointer    value;                                                                               8000688
000689+     //Name of output stream file                                                                                   8000689
000690+     FileName       Pointer    value options(*string);                                                              8000690
000691+     //Ccsid of output file                                                                                         8000691
000692+     Ccsid          Int(10)    value;                                                                               8000692
000693+     Trim           Ind        value;                                                                               8000693
000694+     //Extra options                                                                                                8000694
000695+     Options        Pointer    value options(*string:*nopass);                                                      8000695
000696+   End-PR;                                                                                                          8000696
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     22
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000697+                                                                                                                    8000697
000698+   Dcl-PR json_AsJsonText Varchar(32767)                                                                            8000698
000699+                        extproc(*CWIDEN : 'jx_AsJsonText');                                                         8000699
000700+     //node. Retrive from Locate()                                                                                  8000700
000701+     pNode          Pointer    value;                                                                               8000701
000702+   End-PR;                                                                                                          8000702
000703+                                                                                                                    8000703
000704+   Dcl-PR json_AsJsonTextMem Uns(10)                                                                                8000704
000705+                           extproc(*CWIDEN : 'jx_AsJsonTextMem');                                                   8000705
000706+     //node. Retrive from Locate()                                                                                  8000706
000707+     pNode          Pointer    value;                                                                               8000707
000708+     //pointer to any memory buffer                                                                                 8000708
000709+     pBuffer        Pointer    value;                                                                               8000709
000710+     //Max number of bytes in buffer %size()                                                                        8000710
000711+     maxSize        Uns(10)    value options(*nopass);                                                              8000711
000712+   End-PR;                                                                                                          8000712
000713+                                                                                                                    8000713
000714+   //**  XML  renderes ***                                                                                          8000714
000715+   Dcl-PR json_WriteXmlStmf  extproc(*CWIDEN : 'jx_WriteXmlStmf');                                                  8000715
000716+     //node. Retrive from Locate()                                                                                  8000716
000717+     pNode          Pointer    value;                                                                               8000717
000718+     //Name of output stream file                                                                                   8000718
000719+     FileName       Pointer    value options(*string);                                                              8000719
000720+     //Ccsid of output file                                                                                         8000720
000721+     Ccsid          Int(10)    value;                                                                               8000721
000722+     Trim           Ind        value;                                                                               8000722
000723+     //Extra options                                                                                                8000723
000724+     Options        Pointer    value options(*string:*nopass);                                                      8000724
000725+   End-PR;                                                                                                          8000725
000726+                                                                                                                    8000726
000727+   Dcl-PR json_AsXmlText Varchar(32767) extproc(*CWIDEN : 'jx_AsXmlText');                                          8000727
000728+     //node. Retrive from Locate()                                                                                  8000728
000729+     pNode          Pointer    value;                                                                               8000729
000730+   End-PR;                                                                                                          8000730
000731+                                                                                                                    8000731
000732+   Dcl-PR json_AsXmlTextMem Uns(10) extproc(*CWIDEN : 'jx_AsXmlTextMem');                                           8000732
000733+     //node. Retrive from Locate()                                                                                  8000733
000734+     pNode          Pointer    value;                                                                               8000734
000735+     //pointer to any memory buffer                                                                                 8000735
000736+     pBuffer        Pointer    value;                                                                               8000736
000737+   End-PR;                                                                                                          8000737
000738+                                                                                                                    8000738
000739+   // Return a streamer object to be used in own serialisers                                                        8000739
000740+   Dcl-PR json_Stream pointer extproc(*CWIDEN : 'jx_Stream');                                                       8000740
000741+     //node. Retrive from Locate()                                                                                  8000741
000742+     pNode          Pointer    value;                                                                               8000742
000743+   End-PR;                                                                                                          8000743
000744+                                                                                                                    8000744
000745+   //**  CSV  renderes ***                                                                                          8000745
000746+   Dcl-PR json_WriteCsvStmf  extproc(*CWIDEN : 'jx_WriteCsvStmf');                                                  8000746
000747+     //node. Retrive from Locate()                                                                                  8000747
000748+     pNode          Pointer    value;                                                                               8000748
000749+     //Name of output stream file                                                                                   8000749
000750+     FileName       Pointer    value options(*string);                                                              8000750
000751+     //Ccsid of output file                                                                                         8000751
000752+     Ccsid          Int(10)    value;                                                                               8000752
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     23
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000753+     //*ON=Remove inter blanks                                                                                      8000753
000754+     Trim           Ind        value;                                                                               8000754
000755+     //Options: ';.' for separator and dec                                                                          8000755
000756+     Options        Pointer    value options(*string:*nopass);                                                      8000756
000757+   End-PR;                                                                                                          8000757
000758+                                                                                                                    8000758
000759+                                                                                                                    8000759
000760+   Dcl-DS json_DelimiterDS  based(prototype_only) qualified;                                                        8000760
000761+     Slash          Char(1);                                                                                        8000761
000762+     BackSlash      Char(1);                                                                                        8000762
000763+     Masterspace    Char(1);                                                                                        8000763
000764+     BraBeg         Char(1);                                                                                        8000764
000765+     BraEnd         Char(1);                                                                                        8000765
000766+     Blank          Char(1);                                                                                        8000766
000767+     Dot            Char(1);                                                                                        8000767
000768+     CurBeg         Char(1);                                                                                        8000768
000769+     CurEnd         Char(1);                                                                                        8000769
000770+     Apos           Char(1);                                                                                        8000770
000771+     Quot           Char(1);                                                                                        8000771
000772+   End-DS;                                                                                                          8000772
000773+                                                                                                                    8000773
000774+   //Iterators: First use the set the use forEach                                                                   8000774
000775+   Dcl-DS json_Iterator  based(prototype_only) qualified;                                                           8000775
000776+     root           Pointer;                                                                                        8000776
000777+     this           Pointer;                                                                                        8000777
000778+     isList         Ind;                                                                                            8000778
000779+     isFirst        Ind;                                                                                            8000779
000780+     isLast         Ind;                                                                                            8000780
000781+     isRecursive    Ind;                                                                                            8000781
000782+     comma          Varchar(1);                                                                                     8000782
000783+     count          Int(10);                                                                                        8000783
000784+     length         Int(10);                                                                                        8000784
000785+     size           Int(10);                                                                                        8000785
000786+     //Pointer to temp array of elms                                                                                8000786
000787+     listArr        Pointer;                                                                                        8000787
000788+     //Set  this to *ON to teminate loop                                                                            8000788
000789+     break          Ind;                                                                                            8000789
000790+     filler         Char(64);                                                                                       8000790
000791+   End-DS;                                                                                                          8000791
000792+                                                                                                                    8000792
000793+   Dcl-PR json_setIterator  likeds( json_Iterator)                                                                  8000793
000794+                          extproc(*CWIDEN : 'jx_SetIterator');                                                      8000794
000795+     //node. Retrive from Locate()                                                                                  8000795
000796+     pNode          Pointer    value;                                                                               8000796
000797+     //Optional - path to node                                                                                      8000797
000798+     path           Pointer    value options(*string:*nopass);                                                      8000798
000799+   End-PR;                                                                                                          8000799
000800+                                                                                                                    8000800
000801+   Dcl-PR json_setRecursiveIterator  likeds( json_Iterator)                                                         8000801
000802+                                   extproc(*CWIDEN :                                                                8000802
000803+                                   'jx_SetRecursiveIterator');                                                      8000803
000804+     //node. Retrive from Locate()                                                                                  8000804
000805+     pNode          Pointer    value;                                                                               8000805
000806+     //Optional - path to node                                                                                      8000806
000807+     path           Pointer    value options(*string:*nopass);                                                      8000807
000808+   End-PR;                                                                                                          8000808
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     24
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000809+                                                                                                                    8000809
000810+   //Iterator Structure                                                                                             8000810
000811+   Dcl-PR json_forEach Ind extproc(*CWIDEN : 'jx_ForEach');                                                         8000811
000812+     iterator                  likeds( json_Iterator);                                                              8000812
000813+   End-PR;                                                                                                          8000813
000814+                                                                                                                    8000814
000815+   //For XML attributes                                                                                             8000815
000816+   Dcl-PR json_GetNodeAttrValue Varchar(32767)                                                                      8000816
000817+                              extproc(*CWIDEN : 'jx_GetNodeAttrValueVC');                                           8000817
000818+     //Pointer to exsiting element                                                                                  8000818
000819+     pNode          Pointer    value;                                                                               8000819
000820+     //Attribute Name                                                                                               8000820
000821+     AttrName       Pointer    value options(*string);                                                              8000821
000822+     //If not found - default value                                                                                 8000822
000823+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000823
000824+   End-PR;                                                                                                          8000824
000825+                                                                                                                    8000825
000826+   Dcl-PR json_SetNodeAttrValue extproc(*CWIDEN : 'jx_SetNodeAttrValue');                                           8000826
000827+     //Pointer to exsiting element                                                                                  8000827
000828+     pNode          Pointer    value;                                                                               8000828
000829+     //Attribute name                                                                                               8000829
000830+     AttrName       Pointer    value options(*string);                                                              8000830
000831+     //New value                                                                                                    8000831
000832+     Value          Pointer    value options(*string);                                                              8000832
000833+   End-PR;                                                                                                          8000833
000834+                                                                                                                    8000834
000835+   Dcl-PR json_GetAttrValue Varchar(32767)                                                                          8000835
000836+                          extproc(*CWIDEN : 'jx_GetAttrValueVC');                                                   8000836
000837+     //Pointer Attribute                                                                                            8000837
000838+     pAttr          Pointer    value;                                                                               8000838
000839+     //If not found - default value                                                                                 8000839
000840+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8000840
000841+   End-PR;                                                                                                          8000841
000842+                                                                                                                    8000842
000843+   Dcl-PR json_SetAttrValue extproc(*CWIDEN : 'jx_SetNodeAttrValue');                                               8000843
000844+     //Pointer Attribute                                                                                            8000844
000845+     pAttr          Pointer    value;                                                                               8000845
000846+     //New value                                                                                                    8000846
000847+     AttrName       Pointer    value options(*string);                                                              8000847
000848+     //Default value                                                                                                8000848
000849+     Value          Pointer    value options(*string);                                                              8000849
000850+   End-PR;                                                                                                          8000850
000851+                                                                                                                    8000851
000852+   //Returns pointer to attribute list                                                                              8000852
000853+   Dcl-PR json_GetAttrFirst Pointer extproc(*CWIDEN : 'jx_GetAttrFirst');                                           8000853
000854+     //Pointer to element                                                                                           8000854
000855+     pElem          Pointer    value;                                                                               8000855
000856+   End-PR;                                                                                                          8000856
000857+                                                                                                                    8000857
000858+   //Returns pointer to attribute list                                                                              8000858
000859+   Dcl-PR json_GetAttrNext Pointer extproc(*CWIDEN : 'jx_GetAttrNext');                                             8000859
000860+     //Pointer to attribute list                                                                                    8000860
000861+     pAttr          Pointer    value;                                                                               8000861
000862+   End-PR;                                                                                                          8000862
000863+                                                                                                                    8000863
000864+   Dcl-PR json_GetAttrName Varchar(32767)                                                                           8000864
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     25
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000865+                         extproc(*CWIDEN : 'jx_GetAttrNameVC');                                                     8000865
000866+     //Pointer to attribute list                                                                                    8000866
000867+     pAttr          Pointer    value;                                                                               8000867
000868+   End-PR;                                                                                                          8000868
000869+                                                                                                                    8000869
000870+ // Clear the contents of an array or object / delete all children                                                  8000870
000871+   Dcl-PR json_Clear  extproc(*CWIDEN : 'jx_Clear');                                                                8000871
000872+     pNode          Pointer    value; //Pointer to tree node                                                        8000872
000873+   End-PR;                                                                                                          8000873
000874+                                                                                                                    8000874
000875+ // Close all nodes in this tree - also parent and siblings                                                         8000875
000876+   Dcl-PR json_Close  extproc(*CWIDEN : 'jx_Close');                                                                8000876
000877+     //Pointer to tree node                                                                                         8000877
000878+     pNode          Pointer  ;                                                                                      8000878
000879+   End-PR;                                                                                                          8000879
000880+ // Detect if you have a memry leak: call this when you have closed everything at i will return                     8000880
000881+   Dcl-PR json_MemLeak Ind extproc(*CWIDEN : 'jx_MemLeak');                                                         8000881
000882+   End-PR;                                                                                                          8000882
000883+                                                                                                                    8000883
000884+ // Print memory report                                                                                             8000884
000885+   Dcl-PR json_MemStat  extproc(*CWIDEN : 'jx_MemStat');                                                            8000885
000886+   End-PR;                                                                                                          8000886
000887+                                                                                                                    8000887
000888+ // retune number of bytest used                                                                                    8000888
000889+   Dcl-PR json_MemUse Uns(20) extproc(*CWIDEN : 'jx_MemUse');                                                       8000889
000890+   End-PR;                                                                                                          8000890
000891+                                                                                                                    8000891
000892+ // Return a memory segment pointer, and build a scope where JSON/XML will be created                               8000892
000893+   Dcl-PR json_SegmentSelectNo Pointer                                                                              8000893
000894+                             extproc(*CWIDEN : 'jx_SegmentSelectNo');                                               8000894
000895+     SegmentIndex   Int(10)    value;                                                                               8000895
000896+   End-PR;                                                                                                          8000896
000897+                                                                                                                    8000897
000898+ //  Delete the segment and all JSON/XML nodes build while segment scope was active                                 8000898
000899+   Dcl-PR json_SegmentDispose  extproc(*CWIDEN : 'jx_SegmentDispose');                                              8000899
000900+     segmentPtr     Pointer    value;                                                                               8000900
000901+   End-PR;                                                                                                          8000901
000902+                                                                                                                    8000902
000903+ // Maintain at list of index numbers to database CLOB/BLOB fields since pointers can not be sh                     8000903
000904+   //Returns *ON if found                                                                                           8000904
000905+   Dcl-PR json_mapIx Ind extproc(*CWIDEN:'jx_MapIx' );                                                              8000905
000906+     //pointer to node pointer                                                                                      8000906
000907+     ppNode         Pointer;                                                                                        8000907
000908+     //index of pointer                                                                                             8000908
000909+     Index          Uns(10)    value;                                                                               8000909
000910+   End-PR;                                                                                                          8000910
000911+                                                                                                                    8000911
000912+   //------------------------------------------------------------------------                                       8000912
000913+   //SQL interface:                                                                                                 8000913
000914+   //Note: When SQL functions returns *NULL, then use  the json_Message() to re                                     8000914
000915+   //------------------------------------------------------------------------                                       8000915
000916+                                                                                                                    8000916
000917+ // If options need - then it has to be first call made.                                                            8000917
000918+ // NOTE: If a pConnection pointer is provided, it will be updated with the conection                               8000918
000919+   Dcl-PR json_sqlSetOptions  extproc(*CWIDEN: 'jx_sqlSetOptions');                                                 8000919
000920+     //json object with options ( see sample)                                                                       8000920
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     26
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000921+     parms          Pointer    value options(*string:*nopass);                                                      8000921
000922+   End-PR;                                                                                                          8000922
000923+                                                                                                                    8000923
000924+ // returns a object node with one resulting row for the SQL statment                                               8000924
000925+   //Returns one SQL row as jx Obejct                                                                               8000925
000926+   Dcl-PR json_sqlResultRow Pointer extproc(*CWIDEN: 'jx_sqlResultRow');                                            8000926
000927+     //SQL statement to run                                                                                         8000927
000928+     sqlStmt        Pointer    value options(*string);                                                              8000928
000929+     //json object template                                                                                         8000929
000930+     parms          Pointer    value options(*string:*nopass);                                                      8000930
000931+   End-PR;                                                                                                          8000931
000932+                                                                                                                    8000932
000933+ // returns an array (or object with array) of resulting rows for the SQL statment                                  8000933
000934+   //Returns SQL rows as jx Obejct                                                                                  8000934
000935+   Dcl-PR json_sqlResultSet Pointer extproc(*CWIDEN: 'jx_sqlResultSet');                                            8000935
000936+     //SQL statement to run                                                                                         8000936
000937+     sqlStmt        Pointer    value options(*string);                                                              8000937
000938+     //From row; 1=First                                                                                            8000938
000939+     start          Int(10)    value options(*nopass);                                                              8000939
000940+     //max number of rows; json_ALLROWS=all                                                                         8000940
000941+     limit          Int(10)    value options(*nopass);                                                              8000941
000942+     //resultset format:                                                                                            8000942
000943+     format         Int(10)    value options(*nopass);                                                              8000943
000944+     //json object template                                                                                         8000944
000945+     parms          Pointer    value options(*string:*nopass);                                                      8000945
000946+   End-PR;                                                                                                          8000946
000947+                                                                                                                    8000947
000948+                                                                                                                    8000948
000949+   Dcl-C json_ALLROWS const(-1);                                                                                    8000949
000950+                                                                                                                    8000950
000951+   //Following constants used by json_sqlResultSet:format                                                           8000951
000952+   //+ An array with each row as an object                                                                          8000952
000953+   Dcl-C json_ROWARRAY const(0);                                                                                    8000953
000954+   //+ Metaobject: rows, fields                                                                                     8000954
000955+   Dcl-C json_META    const(1);                                                                                     8000955
000956+   //+ Columns info                                                                                                 8000956
000957+   Dcl-C json_FIELDS  const(2);                                                                                     8000957
000958+   //+ Count all rows in the resultset                                                                              8000958
000959+   // ( Pricy so awoid it !! )                                                                                      8000959
000960+   Dcl-C json_TOTALROWS const(4);                                                                                   8000960
000961+   //+ Uppercase column names                                                                                       8000961
000962+   Dcl-C json_UPPERCASE const(8);                                                                                   8000962
000963+                                                                                                                    8000963
000964+   //+ Appoximate number of rows..                                                                                  8000964
000965+   //  ( unpresise but cheap !! prefered  )                                                                         8000965
000966+   Dcl-C json_APPROXIMATE_TOTALROWS const(16);                                                                      8000966
000967+                                                                                                                    8000967
000968+                                                                                                                    8000968
000969+                                                                                                                    8000969
000970+ // SQL cursor processing                                                                                           8000970
000971+   //Returns handle to sql statement                                                                                8000971
000972+   Dcl-PR json_sqlOpen Pointer extproc(*CWIDEN:'jx_sqlOpen'  );                                                     8000972
000973+     //SQL statement to run                                                                                         8000973
000974+     sqlStmt        Pointer    value options(*string);                                                              8000974
000975+     //json object template                                                                                         8000975
000976+     parms          Pointer    value options(*string:*nopass);                                                      8000976
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     27
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
000977+   End-PR;                                                                                                          8000977
000978+                                                                                                                    8000978
000979+ // Fetch next from from that open sql handle, starting from rowNumer. 1=First row                                  8000979
000980+   //Returns a row object (or *NULL if EOF)                                                                         8000980
000981+   Dcl-PR json_sqlFetchRelative Pointer                                                                             8000981
000982+                              extproc(*CWIDEN: 'jx_sqlFetchRelative');                                              8000982
000983+     //sql statement handle ( from sqlOpen)                                                                         8000983
000984+     pSqlHndl       Pointer    value;                                                                               8000984
000985+     //row from where to start 1=First                                                                              8000985
000986+     fromRow        Int(10)    value;                                                                               8000986
000987+   End-PR;                                                                                                          8000987
000988+                                                                                                                    8000988
000989+ // Fetch next from from that open sql handle                                                                       8000989
000990+   //Returns a row object (or *NULL if EOF)                                                                         8000990
000991+   Dcl-PR json_sqlFetchNext Pointer extproc(*CWIDEN:'jx_sqlFetchNext');                                             8000991
000992+     //sql statement handle ( from sqlOpen)                                                                         8000992
000993+     pSqlHndl       Pointer    value;                                                                               8000993
000994+   End-PR;                                                                                                          8000994
000995+                                                                                                                    8000995
000996+ // Number of columns in result set ( -1 if error)                                                                  8000996
000997+   //Returns number of columns                                                                                      8000997
000998+   Dcl-PR json_sqlColumns Int(10) extproc(*CWIDEN:'jx_sqlColumns');                                                 8000998
000999+     //sql statement handle ( from sqlOpen)                                                                         8000999
001000+     pSqlHndl       Pointer    value;                                                                               8001000
001001+   End-PR;                                                                                                          8001001
001002+                                                                                                                    8001002
001003+ // Number of rows  in result set ( -1 if error)                                                                    8001003
001004+ // Note: This will run a hidden "select count(*)" which might be a little pricy                                    8001004
001005+   //Returns number of rows                                                                                         8001005
001006+   Dcl-PR json_sqlRows Int(10) extproc(*CWIDEN:'jx_sqlRows');                                                       8001006
001007+     //sql statement handle ( from sqlOpen)                                                                         8001007
001008+     pSqlHndl       Pointer    value;                                                                               8001008
001009+   End-PR;                                                                                                          8001009
001010+                                                                                                                    8001010
001011+ // Always colse the cursor after use, to release resources                                                         8001011
001012+   Dcl-PR json_sqlClose  extproc(*CWIDEN:'jx_sqlClose');                                                            8001012
001013+     //sql statement handle ( from sqlOpen)                                                                         8001013
001014+     pSqlHndl       Pointer;                                                                                        8001014
001015+   End-PR;                                                                                                          8001015
001016+                                                                                                                    8001016
001017+ // Execute any SQL statement not involving a cursor                                                                8001017
001018+   //Returns *ON if error                                                                                           8001018
001019+   Dcl-PR json_sqlExec Ind extproc(*CWIDEN:'jx_sqlExec'  );                                                         8001019
001020+     //SQL statement to run (template)                                                                              8001020
001021+     sqlStmt        Pointer    value options(*string);                                                              8001021
001022+     //json object template data                                                                                    8001022
001023+     parms          Pointer    value options(*string:*nopass);                                                      8001023
001024+   End-PR;                                                                                                          8001024
001025+                                                                                                                    8001025
001026+                                                                                                                    8001026
001027+ // call stored procedures                                                                                          8001027
001028+   //Returns handle to sql statement                                                                                8001028
001029+   Dcl-PR json_sqlCall  pointer   extproc(*CWIDEN:'jx_sqlCall'  );                                                  8001029
001030+     // SQL procedure to call                                                                                       8001030
001031+     procedure        Pointer    value options(*string);                                                            8001031
001032+     // json object of input  parameter ( NOTE: It is named parameters)                                             8001032
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     28
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
001033+     inputParms       Pointer    value;                                                                             8001033
001034+   End-PR;                                                                                                          8001034
001035+                                                                                                                    8001035
001036+ // Execute an update table where the row is defined as a json object                                               8001036
001037+   //Returns *ON if error                                                                                           8001037
001038+   Dcl-PR json_sqlUpdate Ind extproc(*CWIDEN:'jx_sqlUpdate');                                                       8001038
001039+     //table name                                                                                                   8001039
001040+     table          Pointer    value options(*string);                                                              8001040
001041+     //json object: {a:123,b:"value"}                                                                               8001041
001042+     row            Pointer    value options(*string);                                                              8001042
001043+     //where clause : 'where myKey=$key'                                                                            8001043
001044+     where          Pointer    value options(*string:*nopass);                                                      8001044
001045+     //where parameters: { key:777}                                                                                 8001045
001046+     whereParms     Pointer    value options(*string:*nopass);                                                      8001046
001047+   End-PR;                                                                                                          8001047
001048+                                                                                                                    8001048
001049+   //Returns *ON if error                                                                                           8001049
001050+   Dcl-PR json_sqlInsert Ind extproc(*CWIDEN:'jx_sqlInsert');                                                       8001050
001051+     //table name                                                                                                   8001051
001052+     table          Pointer    value options(*string);                                                              8001052
001053+     //json object: {a:123,b:"value"}                                                                               8001053
001054+     row            Pointer    value options(*string);                                                              8001054
001055+     //extra parms                                                                                                  8001055
001056+     parms          Pointer    value options(*string:*nopass);                                                      8001056
001057+   End-PR;                                                                                                          8001057
001058+                                                                                                                    8001058
001059+   //Returns *ON if error                                                                                           8001059
001060+   Dcl-PR json_sqlUpsert Ind extproc(*CWIDEN:'jx_sqlUpsert');                                                       8001060
001061+     //table name                                                                                                   8001061
001062+     table          Pointer    value options(*string);                                                              8001062
001063+     //json object: {a:123,b:"value"}                                                                               8001063
001064+     row            Pointer    value options(*string);                                                              8001064
001065+     //where clause : 'where myKey=$key'                                                                            8001065
001066+     where          Pointer    value options(*string:*nopass);                                                      8001066
001067+     //where parameters: { key:777}                                                                                 8001067
001068+     whereParms     Pointer    value options(*string:*nopass);                                                      8001068
001069+   End-PR;                                                                                                          8001069
001070+                                                                                                                    8001070
001071+   //Returns id of last insert                                                                                      8001071
001072+   Dcl-PR json_sqlGetInsertId Int(10) extproc(*CWIDEN:'jx_sqlGetInsertId');                                         8001072
001073+   End-PR;                                                                                                          8001073
001074+                                                                                                                    8001074
001075+   //Returns array of column info                                                                                   8001075
001076+   Dcl-PR json_sqlGetMeta Pointer extproc(*CWIDEN:'jx_sqlGetMeta');                                                 8001076
001077+     sqlstmt        Pointer    value options(*string);                                                              8001077
001078+   End-PR;                                                                                                          8001078
001079+                                                                                                                    8001079
001080+ // Return pointer to database connection. No options => will be default local database                             8001080
001081+   Dcl-PR json_sqlConnect Pointer extproc(*CWIDEN: 'jx_sqlConnect');                                                8001081
001082+     //json object or string with options                                                                           8001082
001083+     parms          Pointer    value options(*string:*nopass);                                                      8001083
001084+   End-PR;                                                                                                          8001084
001085+                                                                                                                    8001085
001086+ // Return pointer to database connection. No options => will be default local database                             8001086
001087+   Dcl-PR json_sqlDisconnect  extproc(*CWIDEN: 'jx_sqlDisconnect');                                                 8001087
001088+   End-PR;                                                                                                          8001088
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     29
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
001089+                                                                                                                    8001089
001090+ // Return sql code for previous statement                                                                          8001090
001091+   Dcl-PR json_sqlCode Int(10) extproc(*CWIDEN: 'jx_sqlCode');                                                      8001091
001092+   End-PR;                                                                                                          8001092
001093+                                                                                                                    8001093
001094+ //Returns a JSON object from a REST call                                                                           8001094
001095+   Dcl-PR json_httpRequest Pointer extproc(*CWIDEN:'jx_httpRequest');                                               8001095
001096+     //Full URL to the resource                                                                                     8001096
001097+     url            Pointer    value options(*string);                                                              8001097
001098+     //json object or string                                                                                        8001098
001099+     pReqNode       Pointer    value options(*string:*nopass);                                                      8001099
001100+     //extra CURL options                                                                                           8001100
001101+     options        Pointer    value options(*string:*nopass);                                                      8001101
001102+   End-PR;                                                                                                          8001102
001103+                                                                                                                    8001103
001104+ // when the dataarea SQLTRACE is set, your SQL statements                                                          8001104
001105+ // are logged into SQLTRACE table.                                                                                 8001105
001106+ // you can supply an extr eye-catch wariable :trcid                                                                8001106
001107+   Dcl-PR json_traceSetId  extproc(*CWIDEN : 'jx_traceSetId');                                                      8001107
001108+     traceId        Int(20)    value; //Ccsid of inpur file                                                         8001108
001109+   End-PR;                                                                                                          8001109
001110+                                                                                                                    8001110
001111+ // courtesy joblog tool                                                                                            8001111
001112+   Dcl-PR json_joblog  extproc(*CWIDEN : 'jx_joblog');                                                              8001112
001113+     //Format string                                                                                                8001113
001114+     msg            Pointer    value options(*string);                                                              8001114
001115+   End-PR;                                                                                                          8001115
001116+                                                                                                                    8001116
001117+ // -------------------------------------------------------------------------------------------                     8001117
001118+ // Depricated and renamed functions :                                                                              8001118
001119+ // -------------------------------------------------------------------------------------------                     8001119
001120+ // Depricated - use  json_GetValueStr                                                                              8001120
001121+   Dcl-PR json_GetValue Varchar(32767) extproc(*CWIDEN : 'jx_GetValueVC');                                          8001121
001122+     //Pointer to node                                                                                              8001122
001123+     pNode          Pointer    value;                                                                               8001123
001124+     //If not found - default value                                                                                 8001124
001125+     Expression     Pointer    value options(*string:*nopass);                                                      8001125
001126+     //If not found - default value                                                                                 8001126
001127+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8001127
001128+   End-PR;                                                                                                          8001128
001129+                                                                                                                    8001129
001130+ // Depricated - use  json_NodeCopy                                                                                 8001130
001131+   Dcl-PR json_Copy extproc(*CWIDEN : 'jx_NodeCopy');                                                               8001131
001132+     //element. Retrive from Locate()                                                                               8001132
001133+     pRootNode      Pointer    value;                                                                               8001133
001134+     //element. Retrive from Locate()                                                                               8001134
001135+     pNewChild      Pointer    value;                                                                               8001135
001136+     //Reference location to where it arrive                                                                        8001136
001137+     RefLocation    Int(10)    value;                                                                               8001137
001138+   End-PR;                                                                                                          8001138
001139+                                                                                                                    8001139
001140+   Dcl-PR json_ElementCopy extproc(*CWIDEN : 'jx_NodeCopy');                                                        8001140
001141+     //element. Retrive from Locate()                                                                               8001141
001142+     pRootNode      Pointer    value;                                                                               8001142
001143+     //element. Retrive from Locate()                                                                               8001143
001144+     pNewChild      Pointer    value;                                                                               8001144
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     30
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
001145+     //Reference location to where it arrive                                                                        8001145
001146+     RefLocation    Int(10)    value;                                                                               8001146
001147+   End-PR;                                                                                                          8001147
001148+                                                                                                                    8001148
001149+ // Depricated - use  json_NodeDelete                                                                               8001149
001150+   Dcl-PR json_Delete extproc(*CWIDEN : 'jx_NodeDelete');                                                           8001150
001151+     //element. Retrive from Locate()                                                                               8001151
001152+     pRootNode      Pointer    value;                                                                               8001152
001153+   End-PR;                                                                                                          8001153
001154+                                                                                                                    8001154
001155+ // Depricated - use  json_NodeDelete                                                                               8001155
001156+   Dcl-PR json_ElementDelete extproc(*CWIDEN : 'jx_NodeDelete');                                                    8001156
001157+     //element. Retrive from Locate()                                                                               8001157
001158+     pRootNode      Pointer    value;                                                                               8001158
001159+   End-PR;                                                                                                          8001159
001160+                                                                                                                    8001160
001161+ // Depricated - use  json_AsJsonText                                                                               8001161
001162+   Dcl-PR json_AsText Varchar(32767) extproc(*CWIDEN : 'jx_AsJsonText');                                            8001162
001163+     //element. Retrive from Locate()                                                                               8001163
001164+     pNode          Pointer    value;                                                                               8001164
001165+   End-PR;                                                                                                          8001165
001166+                                                                                                                    8001166
001167+                                                                                                                    8001167
001168+ // json_XpathValue   is depricated and replaced by: json_GetStr                                                    8001168
001169+   Dcl-PR json_XpathValue Varchar(32767)                                                                            8001169
001170+                        extproc(*CWIDEN : 'jx_GetValueVC');                                                         8001170
001171+     //Pointer to tree                                                                                              8001171
001172+     pNode          Pointer    value;                                                                               8001172
001173+     //Locations expression to node                                                                                 8001173
001174+     Expression     Pointer    value options(*string);                                                              8001174
001175+     //If not found - default value                                                                                 8001175
001176+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8001176
001177+   End-PR;                                                                                                          8001177
001178+                                                                                                                    8001178
001179+ // json_XpathValueNum   is depricated and replaced by: json_GetNum                                                 8001179
001180+   Dcl-PR json_XpathValueNum Packed(30:15)                                                                          8001180
001181+                           extproc(*CWIDEN : 'jx_GetValueNum');                                                     8001181
001182+     //Pointer to tree                                                                                              8001182
001183+     pJsonCom       Pointer    value;                                                                               8001183
001184+     //Location expression to node or attributes                                                                    8001184
001185+     Node           Pointer    value options(*string);                                                              8001185
001186+     //If not found - default value                                                                                 8001186
001187+     Defaultvalue   Packed(30:15) value options(*nopass);                                                           8001187
001188+   End-PR;                                                                                                          8001188
001189+                                                                                                                    8001189
001190+ // Use - json_NodeType                                                                                             8001190
001191+   Dcl-PR json_ElementType Int(5) extproc(*CWIDEN : 'jx_GetNodeType');                                              8001191
001192+     //Pointer to tree to receive format                                                                            8001192
001193+     pNode          Pointer    value;                                                                               8001193
001194+   End-PR;                                                                                                          8001194
001195+                                                                                                                    8001195
001196+ // Use json_NodeAdd                                                                                                8001196
001197+   //returns the new element                                                                                        8001197
001198+   Dcl-PR json_ElementAdd Pointer extproc(*CWIDEN : 'jx_NodeAdd');                                                  8001198
001199+     //element. Retrive from Locate()                                                                               8001199
001200+     pRootNode      Pointer    value;                                                                               8001200
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     31
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
001201+     //Reference location to where it arrive                                                                        8001201
001202+     RefLocation    Int(10)    value;                                                                               8001202
001203+     //Name of element                                                                                              8001203
001204+     Name           Pointer    value options(*string);                                                              8001204
001205+     //Value of element                                                                                             8001205
001206+     Value          Pointer    value options(*string);                                                              8001206
001207+   End-PR;                                                                                                          8001207
001208+                                                                                                                    8001208
001209+ // Use json_GetNext                                                                                                8001209
001210+   //Returns pointer to next sibling (elem)                                                                         8001210
001211+   Dcl-PR json_GetElemNext Pointer extproc(*CWIDEN : 'jx_GetNodeNext');                                             8001211
001212+     //Pointer to current element (elem)                                                                            8001212
001213+     pElem          Pointer    value  ;                                                                             8001213
001214+   End-PR;                                                                                                          8001214
001215+                                                                                                                    8001215
001216+ // use json_GetChild                                                                                               8001216
001217+   //Returns pointer to next child (elem)                                                                           8001217
001218+   Dcl-PR json_GetElemChild Pointer extproc(*CWIDEN : 'jx_GetNodeChild');                                           8001218
001219+     //Pointer to current element (elem)                                                                            8001219
001220+     pElem          Pointer    value;                                                                               8001220
001221+   End-PR;                                                                                                          8001221
001222+                                                                                                                    8001222
001223+                                                                                                                    8001223
001224+ // use get json_GetName                                                                                            8001224
001225+   Dcl-PR json_getElemName Varchar(32767)                                                                           8001225
001226+                         extproc(*CWIDEN : 'jx_GetNodeNameVC');                                                     8001226
001227+     //Pointer to node                                                                                              8001227
001228+     pNode          Pointer    value;                                                                               8001228
001229+   End-PR;                                                                                                          8001229
001230+                                                                                                                    8001230
001231+ // use xml_GetValueStr                                                                                             8001231
001232+   Dcl-PR json_GetElemValue Varchar(32767)                                                                          8001232
001233+                          extproc(*CWIDEN : 'jx_GetNodeValueVC');                                                   8001233
001234+     //Pointer to element                                                                                           8001234
001235+     pElem          Pointer    value;                                                                               8001235
001236+     //If not found - default value                                                                                 8001236
001237+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8001237
001238+   End-PR;                                                                                                          8001238
001239+                                                                                                                    8001239
001240+  // use json_GetAttrValue                                                                                          8001240
001241+   Dcl-PR json_GetAttr Varchar(32767)                                                                               8001241
001242+                     extproc(*CWIDEN : 'jx_GetNodeAttrValueVC');                                                    8001242
001243+     //Pointer to element                                                                                           8001243
001244+     pNode          Pointer    value;                                                                               8001244
001245+     //Attribute Name                                                                                               8001245
001246+     AttrName       Pointer    value options(*string);                                                              8001246
001247+     //If not found - default value                                                                                 8001247
001248+     Defaultvalue   Pointer    value options(*string:*nopass);                                                      8001248
001249+   End-PR;                                                                                                          8001249
001250+                                                                                                                    8001250
001251+ // has no effect any longer                                                                                        8001251
001252+   //Set input and output CCSID                                                                                     8001252
001253+   Dcl-PR json_setCcsid  extproc(*CWIDEN : 'jx_SetCcsid');                                                          8001253
001254+     //Ccsid of inpur file                                                                                          8001254
001255+     inputCCSID     Int(10)    value;                                                                               8001255
001256+     //Ccsid of output file                                                                                         8001256
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     32
Seq    <---------------------- Source Specifications ----------------------------><---- Comments ----> Do  Page  Change Statement
Number ....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10 Num Line  Date   Number
001257+     outputCCSID    Int(10)    value;                                                                               8001257
001258+   End-PR;                                                                                                          8001258
001259+                                                                                                                    8001259
001260+ // depricated - use setNum                                                                                         8001260
001261+   Dcl-PR json_SetDec Pointer extproc(*CWIDEN: 'jx_SetDecByName');                                                  8001261
001262+     //Pointer to json_ tree                                                                                        8001262
001263+     pNode          Pointer    value;                                                                               8001263
001264+     //Location expression to node or attributes                                                                    8001264
001265+     Expresion      Pointer    value options(*string);                                                              8001265
001266+     //New value to set / pointer to object                                                                         8001266
001267+     Value          Packed(30:15) value;                                                                            8001267
001268+   End-PR;                                                                                                          8001268
001269+                                                                                                                    8001269
001270+ // Depricated in both JSON and XML - use  json_WriteJsonStmf /   json_WriteXmlStmf                                 8001270
001271+ /if not defined(JSONXML_DEPRICATED)                                                                                8001271
001272+ /define  JSONXML_DEPRICATED                                                                                        8001272
001273+   Dcl-PR json_WriteStmf  extproc(*CWIDEN : 'jx_WriteJsonStmf');                                                    8001273
001274+     //element. Retrive from Locate()                                                                               8001274
001275+     pNode          Pointer    value;                                                                               8001275
001276+     //Name of output stream file                                                                                   8001276
001277+     FileName       Pointer    value options(*string);                                                              8001277
001278+     //Ccsid of output file                                                                                         8001278
001279+     Ccsid          Int(10)    value;                                                                               8001279
001280+     Trim           Ind        value options(*nopass);                                                              8001280
001281+   End-PR;                                                                                                          8001281
001282+                                                                                                                    8001282
001283+   Dcl-PR xml_WriteStmf  extproc(*CWIDEN : 'jx_WriteXmlStmf');                                                      8001283
001284+     //element. Retrive from Locate()                                                                               8001284
001285+     pNode          Pointer    value;                                                                               8001285
001286+     //Name of output stream file                                                                                   8001286
001287+     FileName       Pointer    value options(*string);                                                              8001287
001288+     //Ccsid of output file                                                                                         8001288
001289+     Ccsid          Int(10)    value;                                                                               8001289
001290+     Trim           Ind        value options(*nopass);                                                              8001290
001291+   End-PR;                                                                                                          8001291
001292+ /endif                                                                                                             8001292
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000026                                                                                                                      000026
000027 dcl-pr sys_getUtcOffset extproc('CEEUTCO');                                                                          000027
000028   offsetHours int(10);                                                                                               000028
000029   offsetMinutes int(10);                                                                                             000029
000030   offsetSeconds float(8);                                                                                            000030
000031   feedback char(12) options(*omit);                                                                                  000031
000032 end-pr;                                                                                                              000032
000033                                                                                                                      000033
000034 dcl-c UNIX_EPOCH_START z'1970-01-01-00.00.00.000000';                                                                000034
000035 dcl-s UTF8_PERIOD char(1) inz('.') CCSID(*UTF8);                                                                     000035
000036                                                                                                                      000036
000037                                                                                                                      000037
000038 dcl-proc jwt_verify export;                                                                                          000038
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     33
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000039   dcl-pi *n ind;                                                                                                     000039
000040     token like(jwt_token_t) const ccsid(*utf8);                                                                      000040
000041     options likeDs(jwt_options_t) const;                                                                             000041
000042   end-pi;                                                                                                            000042
000043                                                                                                                      000043
000044   dcl-s validatePtr pointer(*proc);                                                                                  000044
000045   dcl-pr validateToken ind extproc(validatePtr);                                                                     000045
000046     token like(jwt_token_t) const ccsid(*utf8);                                                                      000046
000047   end-pr;                                                                                                            000047
000048                                                                                                                      000048
000049   dcl-s valid ind inz(*off);                                                                                         000049
000050   dcl-s signedToken like(jwt_token_t) ccsid(*utf8);                                                                  000050
000051   dcl-s tokenAlgorithm char(100);                                                                                    000051
000052   dcl-s header like(jwt_token_t);                                                                                    000052
000053   dcl-s payload like(jwt_token_t);                                                                                   000053
000054   dcl-s json pointer;                                                                                                000054
000055   dcl-s procPtr    pointer(*PROC);                                                                                   000055
000056   dcl-s data like(jwt_token_t) ccsid(*utf8);                                                                         000056
000057   dcl-s signatureTmp like(jwt_token_t) ccsid(*utf8);                                                                 000057
000058   dcl-s signature like(jwt_token_t) ccsid(*utf8);                                                                    000058
000059   dcl-s payloadPos   int(10);                                                                                        000059
000060                                                                                                                      000060
000061   monitor;                                                                                           B01             000061
000062     header = jwt_decodeHeader(token);                                                                 01             000062
000063     json = json_parseString(header);                                                                  01             000063
000064     tokenAlgorithm = json_getStr(json : 'alg' : '');                                                  01             000064
000065     json_close(json);                                                                                 01             000065
000066                                                                                                                      000066
000067     payload = jwt_decodePayload(token);                                                               01             000067
000068     json = json_parseString(payload);                                                                 01             000068
000069                                                                                                                      000069
000070     select;                                                                                          B02             000070
000071       when (isExpired(json) or not isActive(json));                                                  X02             000071
000072         // Do nothing. Encryption/signature validation is costly and time consuming business.                        000072
000073         // If the token is expired, do not even bother to waste time on checking signature.                          000073
000074                                                                                                                      000074
000075       when options.alg = JWT_SIG_NONE;                                                               X02             000075
000076         // No signature verification => always valid                                                                 000076
000077         valid = *on;                                                                                  02             000077
000078                                                                                                                      000078
000079       when (options.validate <> *null);                                                              X02             000079
000080         validatePtr = options.validate;                                                               02             000080
000081         valid = validateToken(token);                                                                 02             000081
000082                                                                                                                      000082
000083       when (tokenAlgorithm = *blank);                                                                X02             000083
000084         // token doesn't contain algorithm claim in header                                                           000084
000085         valid = *off;                                                                                 02             000085
000086                                                                                                                      000086
000087       when (options.alg <> *blank and options.alg <> tokenAlgorithm);                                X02             000087
000088         // token algorithm does not match the configured valid algorithm                                             000088
000089         valid = *off;                                                                                 02             000089
000090                                                                                                                      000090
000091       when (%subst(tokenAlgorithm : 1 : 2) = 'HS');                                                  X02             000091
000092         signedToken = jwt_hmac_encode(tokenAlgorithm : payload : options.key);                        02             000092
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     34
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000093         valid = (token = signedToken);                                                                02             000093
000094                                                                                                                      000094
000095       when %subst(tokenAlgorithm : 1 : 2) = 'RS';                                                    X02             000095
000096         valid = jwt_rsa_verify(tokenAlgorithm : token : options.key);                                 02             000096
000097                                                                                                                      000097
000098     endsl;                                                                                           E02             000098
000099                                                                                                                      000099
000100     return valid;                                                                                     01             000100
000101                                                                                                                      000101
000102   on-error;                                                                                          X01             000102
000103     return *off;                                                                                      01             000103
000104   endmon;                                                                                            E01             000104
000105                                                                                                                      000105
000106   on-exit;                                                                                                           000106
000107       json_close(json);                                                                                              000107
000108 end-proc;                                                                                                            000108
000109                                                                                                                      000109
000110                                                                                                                      000110
000111 dcl-proc jwt_decodeHeader export;                                                                                    000111
000112   dcl-pi *n like(jwt_token_t) ccsid(*utf8);                                                                          000112
000113     token like(jwt_token_t) const ccsid(*utf8);                                                                      000113
000114   end-pi;                                                                                                            000114
000115                                                                                                                      000115
000116   dcl-s x int(10);                                                                                                   000116
000117   dcl-s decoded like(jwt_token_t) ccsid(*utf8);                                                                      000117
000118   dcl-s header like(jwt_token_t) ccsid(*utf8);                                                                       000118
000119                                                                                                                      000119
000120   // JWT header                                                                                                      000120
000121   x = %scan(UTF8_PERIOD : token);                                                                                    000121
000122   if (x = 0);                                                                                        B01             000122
000123     return *blank;                                                                                    01             000123
000124   endif;                                                                                             E01             000124
000125                                                                                                                      000125
000126   header = %subst(token : 1 : x - 1);                                                                                000126
000127   decoded = jwt_decodeBase64Url(header);                                                                             000127
000128                                                                                                                      000128
000129   return decoded;                                                                                                    000129
000130 end-proc;                                                                                                            000130
000131                                                                                                                      000131
000132                                                                                                                      000132
000133 dcl-proc jwt_decodePayload export;                                                                                   000133
000134   dcl-pi *n like(jwt_token_t) ccsid(*utf8);                                                                          000134
000135     token like(jwt_token_t) const ccsid(*utf8);                                                                      000135
000136   end-pi;                                                                                                            000136
000137                                                                                                                      000137
000138   dcl-s x int(10);                                                                                                   000138
000139   dcl-s x2 int(10);                                                                                                  000139
000140   dcl-s decoded like(jwt_token_t) ccsid(*utf8);                                                                      000140
000141   dcl-s payload like(jwt_token_t) ccsid(*utf8);                                                                      000141
000142                                                                                                                      000142
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     35
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000143   // JWT header                                                                                                      000143
000144   x = %scan(UTF8_PERIOD : token);                                                                                    000144
000145   if (x = 0);                                                                                        B01             000145
000146     return *blank;                                                                                    01             000146
000147   endif;                                                                                             E01             000147
000148                                                                                                                      000148
000149   // JWT payload                                                                                                     000149
000150   x2 = %scan(UTF8_PERIOD : token : x+1);                                                                             000150
000151   if (x2 = 0);                                                                                       B01             000151
000152     return *blank;                                                                                    01             000152
000153   endif;                                                                                             E01             000153
000154                                                                                                                      000154
000155   payload = %subst(token : x+1 : x2 - x);                                                                            000155
000156   decoded = jwt_decodeBase64Url(payload);                                                                            000156
000157                                                                                                                      000157
000158   return decoded;                                                                                                    000158
000159 end-proc;                                                                                                            000159
000160                                                                                                                      000160
000161                                                                                                                      000161
000162 dcl-proc jwt_sign export;                                                                                            000162
000163   dcl-pi *n like(jwt_token_t) ccsid(*utf8);                                                                          000163
000164     algorithm char(100) const;                                                                                       000164
000165     p_payload like(jwt_token_t) const ccsid(*utf8);                                                                  000165
000166     options likeds(jwt_options_t) const;                                                                             000166
000167     claims likeds(jwt_claims_t) const options(*nopass);                                                              000167
000168   end-pi;                                                                                                            000168
000169                                                                                                                      000169
000170   dcl-s headerPayload char(65535) ccsid(*utf8);                                                                      000170
000171   dcl-s header like(jwt_token_t) ccsid(*utf8);                                                                       000171
000172   dcl-s encoded like(jwt_token_t) ccsid(*utf8);                                                                      000172
000173   dcl-s base64Encoded like(jwt_token_t) ccsid(*utf8);                                                                000173
000174   dcl-s paddingChar char(1) inz('=') ccsid(*utf8);                                                                   000174
000175   dcl-s payload like(jwt_token_t) ccsid(*utf8);                                                                      000175
000176                                                                                                                      000176
000177   // TODO add kid if set in options                                                                                  000177
000178   header = '{"alg":"' + algorithm + '","typ":"JWT"}';                                                                000178
000179                                                                                                                      000179
000180   payload = p_payload;                                                                                               000180
000181   if (%parms() >= 4);                                                                                B01             000181
000182     payload = addClaims(payload : claims);                                                            01             000182
000183   endif;                                                                                             E01             000183
000184                                                                                                                      000184
000185   base64Encoded = jwt_encodeBase64Url(payload);                                                                      000185
000186   base64Encoded = %trimr(base64Encoded : paddingChar);                                                               000186
000187   headerPayload = jwt_encodeBase64Url(header) + '.' + base64Encoded;                                                 000187
000188                                                                                                                      000188
000189   // TODO                                                                                                            000189
000190                                                                                                                      000190
000191   return 'TODO';                                                                                                     000191
000192 end-proc;                                                                                                            000192
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     36
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000193                                                                                                                      000193
000194                                                                                                                      000194
000195 dcl-proc addClaims;                                                                                                  000195
000196   dcl-pi *n like(jwt_token_t) ccsid(*utf8);                                                                          000196
000197     pPayload like(jwt_token_t) const ccsid(*utf8);                                                                   000197
000198     claims likeds(jwt_claims_t) const;                                                                               000198
000199   end-pi;                                                                                                            000199
000200                                                                                                                      000200
000201   dcl-s payload like(jwt_token_t) ccsid(*utf8);                                                                      000201
000202   dcl-s json pointer;                                                                                                000202
000203   dcl-s value like(jwt_token_t);                                                                                     000203
000204   dcl-s uxts int(10);                                                                                                000204
000205   dcl-s changed ind inz(*off);                                                                                       000205
000206                                                                                                                      000206
000207   payload = %trimr(pPayload) + x'00';                                                                                000207
000208                                                                                                                      000208
000209   json = json_parseString(%addr(payload : *DATA));                                                                   000209
000210                                                                                                                      000210
000211   if (%len(claims.issuer) > 0);                                                                      B01             000211
000212     value = claims.issuer + x'00';                                                                    01             000212
000213     json_setStr(json : 'iss' : %addr(value : *DATA));                                                 01             000213
000214     changed = *on;                                                                                    01             000214
000215   endif;                                                                                             E01             000215
000216                                                                                                                      000216
000217   if (%len(claims.subject) > 0);                                                                     B01             000217
000218     value = claims.subject + x'00';                                                                   01             000218
000219     json_setStr(json : 'sub' : %addr(value : *DATA));                                                 01             000219
000220     changed = *on;                                                                                    01             000220
000221   endif;                                                                                             E01             000221
000222                                                                                                                      000222
000223   if (%len(claims.audience) > 0);                                                                    B01             000223
000224     value = claims.audience + x'00';                                                                  01             000224
000225     json_setStr(json : 'aud' : %addr(value : *DATA));                                                 01             000225
000226     changed = *on;                                                                                    01             000226
000227   endif;                                                                                             E01             000227
000228                                                                                                                      000228
000229   if (%len(claims.jwtId) > 0);                                                                       B01             000229
000230     value = claims.jwtId + x'00';                                                                     01             000230
000231     json_setStr(json : 'jti' : %addr(value : *DATA));                                                 01             000231
000232     changed = *on;                                                                                    01             000232
000233   endif;                                                                                             E01             000233
000234                                                                                                                      000234
000235   if (claims.expirationTime <> *loval);                                                              B01             000235
000236     uxts = toUnixTimestamp(claims.expirationTime);                                                    01             000236
000237     json_setInt(json : 'exp' : uxts);                                                                 01             000237
000238     changed = *on;                                                                                    01             000238
000239   endif;                                                                                             E01             000239
000240                                                                                                                      000240
000241   if (claims.notBefore <> *loval);                                                                   B01             000241
000242     uxts = toUnixTimestamp(claims.notBefore);                                                         01             000242
000243     json_setInt(json : 'nbf' : uxts);                                                                 01             000243
000244     changed = *on;                                                                                    01             000244
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     37
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000245   endif;                                                                                             E01             000245
000246                                                                                                                      000246
000247   if (claims.issuedAt <> *loval);                                                                    B01             000247
000248     uxts = toUnixTimestamp(claims.issuedAt);                                                          01             000248
000249     json_setInt(json : 'iat' : uxts);                                                                 01             000249
000250     changed = *on;                                                                                    01             000250
000251   endif;                                                                                             E01             000251
000252                                                                                                                      000252
000253   if (changed);                                                                                      B01             000253
000254     payload = json_asJsonText(json);                                                                  01             000254
000255     json_close(json);                                                                                 01             000255
000256     return payload;                                                                                   01             000256
000257   else;                                                                                              X01             000257
000258     json_close(json);                                                                                 01             000258
000259     return pPayload;                                                                                  01             000259
000260   endif;                                                                                             E01             000260
000261 end-proc;                                                                                                            000261
000262                                                                                                                      000262
000263                                                                                                                      000263
000264 dcl-proc jwt_isExpired export;                                                                                       000264
000265   dcl-pi *n ind;                                                                                                     000265
000266     pPayload like(jwt_token_t) const ccsid(*utf8);                                                                   000266
000267   end-pi;                                                                                                            000267
000268                                                                                                                      000268
000269   dcl-s payload like(jwt_token_t);                                                                                   000269
000270   dcl-s expired ind inz(*off);                                                                                       000270
000271   dcl-s json pointer;                                                                                                000271
000272                                                                                                                      000272
000273   payload = pPayload;                                                                                                000273
000274                                                                                                                      000274
000275   json = json_parseString(payload);                                                                                  000275
000276   expired = isExpired(json);                                                                                         000276
000277   json_close(json);                                                                                                  000277
000278                                                                                                                      000278
000279   return expired;                                                                                                    000279
000280 end-proc;                                                                                                            000280
000281                                                                                                                      000281
000282                                                                                                                      000282
000283 dcl-proc isExpired;                                                                                                  000283
000284   dcl-pi *n ind;                                                                                                     000284
000285     json pointer const;                                                                                              000285
000286   end-pi;                                                                                                            000286
000287                                                                                                                      000287
000288   dcl-s expired ind inz(*off);                                                                                       000288
000289   dcl-s exp int(20);                                                                                                 000289
000290   dcl-s expTimestamp timestamp;                                                                                      000290
000291   dcl-s now timestamp;                                                                                               000291
000292   dcl-s offsetHours int(10);                                                                                         000292
000293   dcl-s offsetMinutes int(10);                                                                                       000293
000294   dcl-s offsetSeconds float(8);                                                                                      000294
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     38
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000295                                                                                                                      000295
000296   now = %timestamp();                                                                                                000296
000297   sys_getUtcOffset(offsetHours : offsetMinutes : offsetSeconds : *omit);                                             000297
000298                                                                                                                      000298
000299   exp = json_getInt(json : 'exp' : -1);                                                                              000299
000300                                                                                                                      000300
000301   if (exp >= 0);                                                                                     B01             000301
000302     expTimestamp = UNIX_EPOCH_START + %seconds(exp + %int(offsetSeconds));                            01             000302
000303     expired = (now >= expTimestamp);                                                                  01             000303
000304   endif;                                                                                             E01             000304
000305                                                                                                                      000305
000306   return expired;                                                                                                    000306
000307 end-proc;                                                                                                            000307
000308                                                                                                                      000308
000309                                                                                                                      000309
000310 dcl-proc isActive;                                                                                                   000310
000311   dcl-pi *n ind;                                                                                                     000311
000312     json pointer const;                                                                                              000312
000313   end-pi;                                                                                                            000313
000314                                                                                                                      000314
000315   dcl-s active ind inz(*on);                                                                                         000315
000316   dcl-s nbf int(20);                                                                                                 000316
000317   dcl-s nbfTimestamp timestamp;                                                                                      000317
000318   dcl-s now timestamp;                                                                                               000318
000319   dcl-s offsetHours int(10);                                                                                         000319
000320   dcl-s offsetMinutes int(10);                                                                                       000320
000321   dcl-s offsetSeconds float(8);                                                                                      000321
000322                                                                                                                      000322
000323   now = %timestamp();                                                                                                000323
000324   sys_getUtcOffset(offsetHours : offsetMinutes : offsetSeconds : *omit);                                             000324
000325                                                                                                                      000325
000326   nbf = json_getInt(json : 'nbf' : -1);                                                                              000326
000327                                                                                                                      000327
000328   if (nbf >= 0);                                                                                     B01             000328
000329     nbfTimestamp = UNIX_EPOCH_START + %seconds(nbf + %int(offsetSeconds));                            01             000329
000330     active = (now >= nbfTimestamp);                                                                   01             000330
000331   endif;                                                                                             E01             000331
000332                                                                                                                      000332
000333   return active;                                                                                                     000333
000334 end-proc;                                                                                                            000334
000335                                                                                                                      000335
000336                                                                                                                      000336
000337 dcl-proc toUnixTimestamp;                                                                                            000337
000338   dcl-pi *n int(10);                                                                                                 000338
000339     ts timestamp const;                                                                                              000339
000340   end-pi;                                                                                                            000340
000341                                                                                                                      000341
000342   dcl-s offsetHours int(10);                                                                                         000342
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     39
Seq    <---------------------- Source Specifications ----------------------------------------------------->  Do  Change Statement
Number ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+...10  Num Date   Number
000343   dcl-s offsetMinutes int(10);                                                                                       000343
000344   dcl-s offsetSeconds float(8);                                                                                      000344
000345   dcl-s uxts int(10);                                                                                                000345
000346                                                                                                                      000346
000347   sys_getUtcOffset(offsetHours : offsetMinutes : offsetSeconds : *omit);                                             000347
000348                                                                                                                      000348
000349   uxts = %diff(ts : UNIX_EPOCH_START : *SECONDS) - %int(offsetSeconds);                                              000349
000350                                                                                                                      000350
000351   return uxts;                                                                                                       000351
000352 end-proc;                                                                                                            000352
000353                                                                                                                      000353
       * * * * *   E N D   O F   S O U R C E   * * * * *
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     40
          A d d i t i o n a l   D i a g n o s t i c   M e s s a g e s
 Msg id  Sv   Statement    Message text
*RNF5409 00        000213  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000219  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000225  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000231  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000237  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000243  The prototyped call returns a value which is lost when
                           CALLP is used.
*RNF5409 00        000249  The prototyped call returns a value which is lost when
                           CALLP is used.
 * * * * *   E N D   O F   A D D I T I O N A L   D I A G N O S T I C   M E S S A G E S   * * * * *
                            / C o p y   M e m b e r s
Statement  Src  RPG name   <-------- External name -------> CCSID  <- Last change ->
Number     Id              Library    File       Member            Date     Time
    000018    1 QUSEC      QSYSINC    QRPGLESRC  QUSEC         37  19-02-17 10:02:41
    000021    2 base64url+ ./base64url.rpginc                 850  23-12-17 06:51:29
    000022    3 jwt.rpginc ./jwt.rpginc                      1208  24-04-25 09:27:07
    000023    4 hmac.rpgi+ ./hmac.rpginc                      819  23-12-17 09:43:56
   4000009    5 jwt.rpginc ./jwt.rpginc                      1208  24-04-25 09:27:07
    000024    6 rsa.rpginc ./rsa.rpginc                      1252  24-04-25 07:52:06
   6000009    7 jwt.rpginc ./jwt.rpginc                      1208  24-04-25 09:27:07
    000025    8 jsonparse+ ../../noxDB/headers/jsonparser.+  1208  23-08-06 09:55:37
         * * * * *   E N D   O F   / C O P Y   M E M B E R S   * * * * *
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     41
                          C r o s s   R e f e r e n c e
      File and Record References:
         File              Device             References (D=Defined)
           Record
         No references in the source.
      Global Field References:
         Field             Attributes         References (D=Defined M=Modified)
         ADDCLAIMS         A(65530)               000182      000195
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
         ISACTIVE          N(1)                   000071      000310
                           PROTOTYPE
         ISEXPIRED         N(1)                   000071      000276      000283
                           PROTOTYPE
*RNF7031 JSON_AFTER_SIBLING...
                           CONST                 8000515D
*RNF7031 JSON_ALLOW_PRIMITIVES...
                           CONST                 8000061D
*RNF7031 JSON_ALLROWS      CONST                 8000949D
*RNF7031 JSON_APPROXIMATE_TOTALROWS...
                           CONST                 8000966D
*RNF7031 JSON_ARRAY        CONST                 8000044D
*RNF7031 JSON_ARRAYAPPEND  *(16)                 8000586D
                           PROTOTYPE
*RNF7031 JSON_ARRAYPUSH    *(16)                 8000572D
                           PROTOTYPE
*RNF7031 JSON_ARRAYSLICE   *(16)                 8000596D
                           PROTOTYPE
*RNF7031 JSON_ARRAYSORT    *(16)                 8000608D
                           PROTOTYPE
         JSON_ASJSONTEXT   A(32767)              8000698D     000254
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_ASJSONTEXTMEM...
                           U(10,0)               8000704D
                           PROTOTYPE
*RNF7031 JSON_ASTEXT       A(32767)              8001162D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_ASXMLTEXT    A(32767)              8000727D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_ASXMLTEXTMEM U(10,0)               8000732D
                           PROTOTYPE
*RNF7031 JSON_BEFORE_SIBLING...
                           CONST                 8000514D
*RNF7031 JSON_BY_CONTEXT   CONST                 8000053D
*RNF7031 JSON_CHILD_LIST   CONST                 8000081D
*RNF7031 JSON_CLEAR        PROTOTYPE             8000871D
*RNF7031 JSON_CLONEFORMAT  PROTOTYPE             8000678D
         JSON_CLOSE        PROTOTYPE             8000876D     000065M     000107M     000255M
                                                  000258M     000277M
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     42
*RNF7031 JSON_COPY         PROTOTYPE             8001131D
*RNF7031 JSON_COPY_CLONE   CONST                 8000583D
*RNF7031 JSON_COPYVALUE    *(16)                 8000491D
                           PROTOTYPE
*RNF7031 JSON_DELETE       PROTOTYPE             8001150D
*RNF7031 JSON_DELIMITERDS  DS(11)                8000760D
                           BASED(PROTOTYPE+)
*RNF7031   APOS            A(1)                  8000770D
*RNF7031   BACKSLASH       A(1)                  8000762D
*RNF7031   BLANK           A(1)                  8000766D
*RNF7031   BRABEG          A(1)                  8000764D
*RNF7031   BRAEND          A(1)                  8000765D
*RNF7031   CURBEG          A(1)                  8000768D
*RNF7031   CUREND          A(1)                  8000769D
*RNF7031   DOT             A(1)                  8000767D
*RNF7031   MASTERSPACE     A(1)                  8000763D
*RNF7031   QUOT            A(1)                  8000771D
*RNF7031   SLASH           A(1)                  8000761D
*RNF7031 JSON_DELIMITERS   CONST                 8000037D
*RNF7031 JSON_DONTREPLACE  CONST                 8000650D
*RNF7031 JSON_DUMP         PROTOTYPE             8000672D
*RNF7031 JSON_ELEMENTADD   *(16)                 8001198D
                           PROTOTYPE
*RNF7031 JSON_ELEMENTCOPY  PROTOTYPE             8001140D
*RNF7031 JSON_ELEMENTDELETE...
                           PROTOTYPE             8001156D
*RNF7031 JSON_ELEMENTTYPE  I(5,0)                8001191D
                           PROTOTYPE
*RNF7031 JSON_ERROR        N(1)                  8000124D
                           PROTOTYPE
*RNF7031 JSON_EVAL         CONST                 8000045D
*RNF7031 JSON_FIELDS       CONST                 8000957D
*RNF7031 JSON_FIRST_CHILD  CONST                 8000512D
*RNF7031 JSON_FOREACH      N(1)                  8000811D
                           PROTOTYPE
*RNF7031 JSON_GETATTR      A(32767)              8001241D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETATTRFIRST *(16)                 8000853D
                           PROTOTYPE
*RNF7031 JSON_GETATTRNAME  A(32767)              8000864D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETATTRNEXT  *(16)                 8000859D
                           PROTOTYPE
*RNF7031 JSON_GETATTRVALUE A(32767)              8000835D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETBOOL      N(1)                  8000444D
                           PROTOTYPE
*RNF7031 JSON_GETCHILD     *(16)                 8000218D
                           PROTOTYPE
*RNF7031 JSON_GETDATE      D(10*ISO-)            8000453D
                           PROTOTYPE
*RNF7031 JSON_GETDELIMITERS...
                           *(16)                 8000029D
                           PROTOTYPE
*RNF7031 JSON_GETELEMCHILD *(16)                 8001218D
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     43
                           PROTOTYPE
*RNF7031 JSON_GETELEMNAME  A(32767)              8001225D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETELEMNEXT  *(16)                 8001211D
                           PROTOTYPE
*RNF7031 JSON_GETELEMVALUE A(32767)              8001232D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETILOBVALUE N(1)                  8000482D
                           PROTOTYPE
         JSON_GETINT       I(20,0)               8000435D     000299      000326
                           PROTOTYPE
*RNF7031 JSON_GETLENGTH    I(10,0)               8000634D
                           PROTOTYPE
*RNF7031 JSON_GETMESSAGEOBJECT...
                           *(16)                 8000137D
                           PROTOTYPE
*RNF7031 JSON_GETNAME      A(32767)              8000380D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETNAMEASPATH...
                           A(32767)              8000386D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETNEXT      *(16)                 8000212D
                           PROTOTYPE
*RNF7031 JSON_GETNODEATTRVALUE...
                           A(32767)              8000816D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETNUM       P(30,15)              8000426D
                           PROTOTYPE
*RNF7031 JSON_GETPARENT    *(16)                 8000224D
                           PROTOTYPE
         JSON_GETSTR       A(32767)              8000403D     000064
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETSTRJOIN   A(32767)              8000413D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETTIME      T(8*ISO.)             8000462D
                           PROTOTYPE
*RNF7031 JSON_GETTIMESTAMP Z(26)                 8000471D
                           PROTOTYPE
*RNF7031 JSON_GETVALUE     A(32767)              8001121D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_GETVALUEINT  I(20,0)               8000367D
                           PROTOTYPE
*RNF7031 JSON_GETVALUENUM  P(30,15)              8000359D
                           PROTOTYPE
*RNF7031 JSON_GETVALUEPTR  *(16)                 8000373D
                           PROTOTYPE
*RNF7031 JSON_GETVALUESTR  A(32767)              8000351D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_HAS          N(1)                  8000168D
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     44
                           PROTOTYPE
*RNF7031 JSON_HTTPREQUEST  *(16)                 8001095D
                           PROTOTYPE
*RNF7031 JSON_IGNORE_CASE  CONST                 8000631D
*RNF7031 JSON_ISLITERAL    N(1)                  8000184D
                           PROTOTYPE
*RNF7031 JSON_ISNODE       N(1)                  8000198D
                           PROTOTYPE
*RNF7031 JSON_ISNULL       N(1)                  8000190D
                           PROTOTYPE
*RNF7031 JSON_ISTRUE       N(1)                  8000176D
                           PROTOTYPE
         JSON_ITERATOR     DS(145)               8000775D    8000793     8000801     8000812
                           BASED(PROTOTYPE+)
*RNF7031   BREAK           N(1)                  8000789D
*RNF7031   COMMA           A(1)                  8000782D
                           VARYING(2)
*RNF7031   COUNT           I(10,0)               8000783D
*RNF7031   FILLER          A(64)                 8000790D
*RNF7031   ISFIRST         N(1)                  8000779D
*RNF7031   ISLAST          N(1)                  8000780D
*RNF7031   ISLIST          N(1)                  8000778D
*RNF7031   ISRECURSIVE     N(1)                  8000781D
*RNF7031   LENGTH          I(10,0)               8000784D
*RNF7031   LISTARR         *(16)                 8000787D
*RNF7031   ROOT            *(16)                 8000776D
*RNF7031   SIZE            I(10,0)               8000785D
*RNF7031   THIS            *(16)                 8000777D
*RNF7031 JSON_JOBLOG       PROTOTYPE             8001112D
*RNF7031 JSON_LAST_CHILD   CONST                 8000513D
*RNF7031 JSON_LITERAL      CONST                 8000049D
*RNF7031 JSON_LOCATE       *(16)                 8000151D
                           PROTOTYPE
*RNF7031 JSON_LOCATEORCREATE...
                           *(16)                 8000159D
                           PROTOTYPE
*RNF7031 JSON_LOOKUPVALUE  *(16)                 8000620D
                           PROTOTYPE
*RNF7031 JSON_MAPIX        N(1)                  8000905D
                           PROTOTYPE
*RNF7031 JSON_MEMLEAK      N(1)                  8000881D
                           PROTOTYPE
*RNF7031 JSON_MEMSTAT      PROTOTYPE             8000885D
*RNF7031 JSON_MEMUSE       U(20,0)               8000889D
                           PROTOTYPE
*RNF7031 JSON_MERGE        *(16)                 8000640D
                           PROTOTYPE
*RNF7031 JSON_MERGEOBJECTS *(16)                 8000654D
                           PROTOTYPE
*RNF7031 JSON_MESSAGE      A(1024)               8000130D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_META         CONST                 8000955D
*RNF7031 JSON_MOVE_MODES   CONST                 8000059D
*RNF7031 JSON_MOVE_UNLINK  CONST                 8000582D
*RNF7031 JSON_MOVEOBJECTINTO...
                           *(16)                 8000664D
                           PROTOTYPE
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     45
*RNF7031 JSON_NEWARRAY     *(16)                 8000566D
                           PROTOTYPE
*RNF7031 JSON_NEWOBJECT    *(16)                 8000559D
                           PROTOTYPE
*RNF7031 JSON_NODEADD      *(16)                 8000523D
                           PROTOTYPE
*RNF7031 JSON_NODECHECKSUM U(10,0)               8000554D
                           PROTOTYPE
*RNF7031 JSON_NODECLONE    *(16)                 8000517D
                           PROTOTYPE
*RNF7031 JSON_NODECOPY     PROTOTYPE             8000502D
*RNF7031 JSON_NODEDELETE   PROTOTYPE             8000536D
*RNF7031 JSON_NODERENAME   N(1)                  8000204D
                           PROTOTYPE
*RNF7031 JSON_NODESANITIZE PROTOTYPE             8000547D
*RNF7031 JSON_NODETYPE     I(5,0)                8000395D
                           PROTOTYPE
*RNF7031 JSON_NODEUNLINK   *(16)                 8000542D
                           PROTOTYPE
*RNF7031 JSON_OBJCOPY      CONST                 8000052D
*RNF7031 JSON_OBJECT       CONST                 8000043D
*RNF7031 JSON_OBJLINK      CONST                 8000050D
*RNF7031 JSON_OBJMOVE      CONST                 8000054D
*RNF7031 JSON_OBJREPLACE   CONST                 8000051D
*RNF7031 JSON_PARSE        CONST                 8000065D
*RNF7031 JSON_PARSEFILE    *(16)                 8000085D
                           PROTOTYPE
         JSON_PARSESTRING  *(16)                 8000093D     000063      000068      000209
                           PROTOTYPE              000275
*RNF7031 JSON_PARSESTRINGCCSID...
                           *(16)                 8000101D
                           PROTOTYPE
*RNF7031 JSON_POINTER_VALUE...
                           CONST                 8000046D
*RNF7031 JSON_REPLACE      CONST                 8000651D
*RNF7031 JSON_ROOT         CONST                 8000048D
*RNF7031 JSON_ROWARRAY     CONST                 8000953D
*RNF7031 JSON_SAME_CASE    CONST                 8000630D
*RNF7031 JSON_SEGMENTDISPOSE...
                           PROTOTYPE             8000899D
*RNF7031 JSON_SEGMENTSELECTNO...
                           *(16)                 8000893D
                           PROTOTYPE
*RNF7031 JSON_SETATTRVALUE PROTOTYPE             8000843D
*RNF7031 JSON_SETBOOL      *(16)                 8000270D
                           PROTOTYPE
*RNF7031 JSON_SETCCSID     PROTOTYPE             8001253D
*RNF7031 JSON_SETDATE      *(16)                 8000279D
                           PROTOTYPE
*RNF7031 JSON_SETDEC       *(16)                 8001261D
                           PROTOTYPE
*RNF7031 JSON_SETDECPOINT  PROTOTYPE             8000110D
*RNF7031 JSON_SETDELIMITERS...
                           PROTOTYPE             8000032D
*RNF7031 JSON_SETDELIMITERSBYCCSID...
                           PROTOTYPE             8000116D
*RNF7031 JSON_SETEVAL      *(16)                 8000237D
                           PROTOTYPE
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     46
         JSON_SETINT       *(16)                 8000252D     000237M     000243M     000249M
                           PROTOTYPE
*RNF7031 JSON_SETITERATOR  DS(145)               8000793D
                           PROTOTYPE
*RNF7031 JSON_SETNODEATTRVALUE...
                           PROTOTYPE             8000826D
*RNF7031 JSON_SETNULL      *(16)                 8000230D
                           PROTOTYPE
*RNF7031 JSON_SETNUM       *(16)                 8000261D
                           PROTOTYPE
*RNF7031 JSON_SETPROCPTR   *(16)                 8000319D
                           PROTOTYPE
*RNF7031 JSON_SETPTR       *(16)                 8000308D
                           PROTOTYPE
*RNF7031 JSON_SETRECURSIVEITERATOR...
                           DS(145)               8000801D
                           PROTOTYPE
         JSON_SETSTR       *(16)                 8000243D     000213M     000219M     000225M
                           PROTOTYPE              000231M
*RNF7031 JSON_SETTIME      *(16)                 8000288D
                           PROTOTYPE
*RNF7031 JSON_SETTIMESTAMP *(16)                 8000297D
                           PROTOTYPE
*RNF7031 JSON_SETVALUE     *(16)                 8000340D
                           PROTOTYPE
*RNF7031 JSON_SQLCALL      *(16)                 8001029D
                           PROTOTYPE
*RNF7031 JSON_SQLCLOSE     PROTOTYPE             8001012D
*RNF7031 JSON_SQLCODE      I(10,0)               8001091D
                           PROTOTYPE
*RNF7031 JSON_SQLCOLUMNS   I(10,0)               8000998D
                           PROTOTYPE
*RNF7031 JSON_SQLCONNECT   *(16)                 8001081D
                           PROTOTYPE
*RNF7031 JSON_SQLDISCONNECT...
                           PROTOTYPE             8001087D
*RNF7031 JSON_SQLEXEC      N(1)                  8001019D
                           PROTOTYPE
*RNF7031 JSON_SQLFETCHNEXT *(16)                 8000991D
                           PROTOTYPE
*RNF7031 JSON_SQLFETCHRELATIVE...
                           *(16)                 8000981D
                           PROTOTYPE
*RNF7031 JSON_SQLGETINSERTID...
                           I(10,0)               8001072D
                           PROTOTYPE
*RNF7031 JSON_SQLGETMETA   *(16)                 8001076D
                           PROTOTYPE
*RNF7031 JSON_SQLINSERT    N(1)                  8001050D
                           PROTOTYPE
*RNF7031 JSON_SQLOPEN      *(16)                 8000972D
                           PROTOTYPE
*RNF7031 JSON_SQLRESULTROW *(16)                 8000926D
                           PROTOTYPE
*RNF7031 JSON_SQLRESULTSET *(16)                 8000935D
                           PROTOTYPE
*RNF7031 JSON_SQLROWS      I(10,0)               8001006D
                           PROTOTYPE
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     47
*RNF7031 JSON_SQLSETOPTIONS...
                           PROTOTYPE             8000919D
*RNF7031 JSON_SQLUPDATE    N(1)                  8001038D
                           PROTOTYPE
*RNF7031 JSON_SQLUPSERT    N(1)                  8001060D
                           PROTOTYPE
*RNF7031 JSON_STREAM       *(16)                 8000740D
                           PROTOTYPE
*RNF7031 JSON_SUCCESSTRUE  *(16)                 8000145D
                           PROTOTYPE
*RNF7031 JSON_TOTALROWS    CONST                 8000960D
*RNF7031 JSON_TRACESETID   PROTOTYPE             8001107D
*RNF7031 JSON_UNKNOWN      CONST                 8000042D
*RNF7031 JSON_UPPERCASE    CONST                 8000962D
*RNF7031 JSON_USE_LOCALE   CONST                 8000617D
*RNF7031 JSON_VALUE        CONST                 8000047D
*RNF7031 JSON_WRITECSVSTMF PROTOTYPE             8000746D
*RNF7031 JSON_WRITEJSONSTMF...
                           PROTOTYPE             8000686D
*RNF7031 JSON_WRITESTMF    PROTOTYPE             8001273D
*RNF7031 JSON_WRITEXMLSTMF PROTOTYPE             8000715D
*RNF7031 JSON_XPATHVALUE   A(32767)              8001169D
                           VARYING(2)
                           PROTOTYPE
*RNF7031 JSON_XPATHVALUENUM...
                           P(30,15)              8001180D
                           PROTOTYPE
         JWT_CLAIMS_T      DS(4086)              3000051D    3000136      000167      000198
                           TEMPLATE
*RNF7031   AUDIENCE        A(1000)               3000054D
                           VARYING(2)
*RNF7031   EXPIRATIONTIME  Z(26)                 3000055D
*RNF7031   ISSUEDAT        Z(26)                 3000057D
*RNF7031   ISSUER          A(1000)               3000052D
                           VARYING(2)
*RNF7031   JWTID           A(1000)               3000058D
                           VARYING(2)
*RNF7031   NOTBEFORE       Z(26)                 3000056D
*RNF7031   SUBJECT         A(1000)               3000053D
                           VARYING(2)
         JWT_DECODEBASE64URL...
                           A(524284)             2000014D     000127      000156
                           VARYING(4)
                           CCSID(1208)
                           PROTOTYPE
         JWT_DECODEHEADER  A(65530)              3000099D     000062      000111
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
         JWT_DECODEPAYLOAD A(65530)              3000111D     000067      000133
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
         JWT_ENCODEBASE64URL...
                           A(524284)             2000010D     000185      000187
                           VARYING(4)
                           CCSID(1208)
                           PROTOTYPE
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     48
         JWT_HMAC_ENCODE   A(65530)              4000011D     000092
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
*RNF7031 JWT_HS256         CONST                 3000027D
*RNF7031 JWT_HS384         CONST                 3000028D
*RNF7031 JWT_HS512         CONST                 3000029D
         JWT_ISEXPIRED     N(1)                  3000148D     000264
                           PROTOTYPE
         JWT_OPTIONS_T     DS(8416)              3000064D    3000088     3000135      000041
                           TEMPLATE               000166
*RNF7031   ALG             A(100)                3000069D
*RNF7031   KEY             A(8192)               3000070D
                           CCSID(65535)
*RNF7031   KID             A(100)                3000065D
*RNF7031   VALIDATE        *(16) PROCPTR         3000072D
*RNF7031 JWT_RSA_SIGN      A(65530)              6000017D
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
         JWT_RSA_VERIFY    N(1)                  6000011D     000096
                           PROTOTYPE
*RNF7031 JWT_RS256         CONST                 3000030D
*RNF7031 JWT_RS384         CONST                 3000031D
*RNF7031 JWT_RS512         CONST                 3000032D
         JWT_SIG_NONE      CONST                 3000033D     000075
         JWT_SIGN          A(65530)              3000132D     000162
                           VARYING(2)
                           CCSID(1208)
                           PROTOTYPE
         JWT_SIGNKEY_T     A(1000)               3000043D    4000014     6000014     6000020
                           VARYING(2)
                           TEMPLATE
         JWT_TOKEN_T       A(65530)              3000038D    3000087     3000099     3000100
                           VARYING(2)            3000111     3000112     3000132     3000134
                           TEMPLATE              3000149     4000011     4000013     6000013
                                                 6000017     6000019      000040      000046
                                                  000050      000052      000053      000056
                                                  000057      000058      000112      000113
                                                  000117      000118      000134      000135
                                                  000140      000141      000163      000165
                                                  000171      000172      000173      000175
                                                  000196      000197      000201      000203
                                                  000266      000269
         JWT_VERIFY        N(1)                  3000086D     000038
                           PROTOTYPE
*RNF7031 MO_MERGE_MATCH    CONST                 8000075D
*RNF7031 MO_MERGE_NEW      CONST                 8000073D
*RNF7031 MO_MERGE_REPLACE  CONST                 8000078D
         PROTOTYPE_ONLY    *(16)                 8000760     8000775
*RNF7031 QUSBAVL           I(10,0)               1000050D
*RNF7031 QUSBAVL14         I(10,0)               1000065D
*RNF7031 QUSBPRV           I(10,0)               1000048D
*RNF7031 QUSBPRV00         I(10,0)               1000063D
*RNF7031 QUSCCSID11        I(10,0)               1000071D
*RNF7031 QUSC0200          DS(32)                1000059D
*RNF7031 QUSEC             DS(16)                1000046D
*RNF7031 QUSEI             A(7)                  1000052D
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     49
*RNF7031 QUSEI00           A(7)                  1000067D
*RNF7031 QUSERVED          A(1)                  1000054D
*RNF7031 QUSERVED39        A(1)                  1000069D
*RNF7031 QUSK01            I(10,0)               1000061D
*RNF7031 QUSLED01          I(10,0)               1000075D
*RNF7031 QUSOED01          I(10,0)               1000073D
         SYS_GETUTCOFFSET  PROTOTYPE              000027D     000297M     000324M     000347M
         TOUNIXTIMESTAMP   I(10,0)                000236      000242      000248      000337
                           PROTOTYPE
         UNIX_EPOCH_START  CONST                  000034D     000302      000329      000349
         UTF8_PERIOD       A(1)                   000035D     000121      000144      000150
                           CCSID(1208)
*RNF7031 XML_WRITESTMF     PROTOTYPE             8001283D
      Field References for subprocedure JWT_VERIFY
         Field             Attributes         References (D=Defined M=Modified)
*RNF7031 DATA              A(65530)               000056D
                           VARYING(2)
                           CCSID(1208)
         HEADER            A(65530)               000052D     000062M     000063
                           VARYING(2)
         JSON              *(16)                  000054D     000063M     000064      000065
                                                  000068M     000071      000071      000107
         OPTIONS           DS(8416)               000041D     000075      000079      000080
                           BASED(_QRNL_PST+)      000087      000087      000092      000096
           ALG             A(100)                 000075      000087      000087
           KEY             A(8192)                000092      000096
                           CCSID(65535)
           VALIDATE        *(16) PROCPTR          000079      000080
         PAYLOAD           A(65530)               000053D     000067M     000068      000092
                           VARYING(2)
*RNF7031 PAYLOADPOS        I(10,0)                000059D
*RNF7031 PROCPTR           *(16) PROCPTR          000055D
*RNF7031 SIGNATURE         A(65530)               000058D
                           VARYING(2)
                           CCSID(1208)
*RNF7031 SIGNATURETMP      A(65530)               000057D
                           VARYING(2)
                           CCSID(1208)
         SIGNEDTOKEN       A(65530)               000050D     000092M     000093
                           VARYING(2)
                           CCSID(1208)
         TOKEN             A(65530)               000040D     000062      000067      000081
                           BASED(_QRNL_PST+)      000093      000096
                           VARYING(2)
                           CCSID(1208)
         TOKENALGORITHM    A(100)                 000051D     000064M     000083      000087
                                                  000091      000092      000095      000096
         VALID             N(1)                   000049D     000077M     000081M     000085M
                                                  000089M     000093M     000096M     000100
         VALIDATEPTR       *(16) PROCPTR          000044D     000045      000080M
         VALIDATETOKEN     N(1)                   000045D     000081
                           PROTOTYPE
      Field References for subprocedure JWT_DECODEHEADER
         Field             Attributes         References (D=Defined M=Modified)
         DECODED           A(65530)               000117D     000127M     000129
                           VARYING(2)
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     50
                           CCSID(1208)
         HEADER            A(65530)               000118D     000126M     000127
                           VARYING(2)
                           CCSID(1208)
         TOKEN             A(65530)               000113D     000121      000126
                           BASED(_QRNL_PST+)
                           VARYING(2)
                           CCSID(1208)
         X                 I(10,0)                000116D     000121M     000122      000126
      Field References for subprocedure JWT_DECODEPAYLOAD
         Field             Attributes         References (D=Defined M=Modified)
         DECODED           A(65530)               000140D     000156M     000158
                           VARYING(2)
                           CCSID(1208)
         PAYLOAD           A(65530)               000141D     000155M     000156
                           VARYING(2)
                           CCSID(1208)
         TOKEN             A(65530)               000135D     000144      000150      000155
                           BASED(_QRNL_PST+)
                           VARYING(2)
                           CCSID(1208)
         X                 I(10,0)                000138D     000144M     000145      000150
                                                  000155      000155
         X2                I(10,0)                000139D     000150M     000151      000155
      Field References for subprocedure JWT_SIGN
         Field             Attributes         References (D=Defined M=Modified)
         ALGORITHM         A(100)                 000164D     000178
                           BASED(_QRNL_PST+)
         BASE64ENCODED     A(65530)               000173D     000185M     000186M     000186
                           VARYING(2)             000187
                           CCSID(1208)
         CLAIMS            DS(4086)               000167D     000182
                           BASED(_QRNL_PST+)
*RNF7031 ENCODED           A(65530)               000172D
                           VARYING(2)
                           CCSID(1208)
         HEADER            A(65530)               000171D     000178M     000187
                           VARYING(2)
                           CCSID(1208)
         HEADERPAYLOAD     A(65535)               000170D     000187M
                           CCSID(1208)
*RNF7031 OPTIONS           DS(8416)               000166D
                           BASED(_QRNL_PST+)
         P_PAYLOAD         A(65530)               000165D     000180
                           BASED(_QRNL_PST+)
                           VARYING(2)
                           CCSID(1208)
         PADDINGCHAR       A(1)                   000174D     000186
                           CCSID(1208)
         PAYLOAD           A(65530)               000175D     000180M     000182M     000182
                           VARYING(2)             000185
                           CCSID(1208)
      Field References for subprocedure ADDCLAIMS
         Field             Attributes         References (D=Defined M=Modified)
         CHANGED           N(1)                   000205D     000214M     000220M     000226M
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     51
                                                  000232M     000238M     000244M     000250M
                                                  000253
         CLAIMS            DS(4086)               000198D     000211      000212      000217
                           BASED(_QRNL_PST+)      000218      000223      000224      000229
                                                  000230      000235      000236      000241
                                                  000242      000247      000248
           AUDIENCE        A(1000)                000223      000224
                           VARYING(2)
           EXPIRATIONTIME  Z(26)                  000235      000236
           ISSUEDAT        Z(26)                  000247      000248
           ISSUER          A(1000)                000211      000212
                           VARYING(2)
           JWTID           A(1000)                000229      000230
                           VARYING(2)
           NOTBEFORE       Z(26)                  000241      000242
           SUBJECT         A(1000)                000217      000218
                           VARYING(2)
         JSON              *(16)                  000202D     000209M     000213      000219
                                                  000225      000231      000237      000243
                                                  000249      000254      000255      000258
         PAYLOAD           A(65530)               000201D     000207M     000209      000254M
                           VARYING(2)             000256
                           CCSID(1208)
         PPAYLOAD          A(65530)               000197D     000207      000259
                           BASED(_QRNL_PST+)
                           VARYING(2)
                           CCSID(1208)
         UXTS              I(10,0)                000204D     000236M     000237      000242M
                                                  000243      000248M     000249
         VALUE             A(65530)               000203D     000212M     000213      000218M
                           VARYING(2)             000219      000224M     000225      000230M
                                                  000231
      Field References for subprocedure JWT_ISEXPIRED
         Field             Attributes         References (D=Defined M=Modified)
         EXPIRED           N(1)                   000270D     000276M     000279
         JSON              *(16)                  000271D     000275M     000276      000277
         PAYLOAD           A(65530)               000269D     000273M     000275
                           VARYING(2)
         PPAYLOAD          A(65530)               000266D     000273
                           BASED(_QRNL_PST+)
                           VARYING(2)
                           CCSID(1208)
      Field References for subprocedure ISEXPIRED
         Field             Attributes         References (D=Defined M=Modified)
         EXP               I(20,0)                000289D     000299M     000301      000302
         EXPIRED           N(1)                   000288D     000303M     000306
         EXPTIMESTAMP      Z(26)                  000290D     000302M     000303
         JSON              *(16)                  000285D     000299
                           BASED(_QRNL_PST+)
         NOW               Z(26)                  000291D     000296M     000303
         OFFSETHOURS       I(10,0)                000292D     000297
         OFFSETMINUTES     I(10,0)                000293D     000297
         OFFSETSECONDS     F(8)                   000294D     000297      000302
      Field References for subprocedure ISACTIVE
         Field             Attributes         References (D=Defined M=Modified)
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     52
         ACTIVE            N(1)                   000315D     000330M     000333
         JSON              *(16)                  000312D     000326
                           BASED(_QRNL_PST+)
         NBF               I(20,0)                000316D     000326M     000328      000329
         NBFTIMESTAMP      Z(26)                  000317D     000329M     000330
         NOW               Z(26)                  000318D     000323M     000330
         OFFSETHOURS       I(10,0)                000319D     000324
         OFFSETMINUTES     I(10,0)                000320D     000324
         OFFSETSECONDS     F(8)                   000321D     000324      000329
      Field References for subprocedure TOUNIXTIMESTAMP
         Field             Attributes         References (D=Defined M=Modified)
         OFFSETHOURS       I(10,0)                000342D     000347
         OFFSETMINUTES     I(10,0)                000343D     000347
         OFFSETSECONDS     F(8)                   000344D     000347      000349
         TS                Z(26)                  000339D     000349
                           BASED(_QRNL_PST+)
         UXTS              I(10,0)                000345D     000349M     000351
      Indicator References:
         Indicator                            References (D=Defined M=Modified)
       * * * * *   E N D   O F   C R O S S   R E F E R E N C E   * * * * *
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     53
                      E x t e r n a l   R e f e r e n c e s
      Statically bound procedures:
         Procedure                            References
         jx_Has                                  8000168
         jx_Dump                                 8000672
         CEEUTCO                                  000027      000297      000324      000347
         jx_Error                                8000124
         jx_Clear                                8000871
         jx_Close                                8000876      000065      000107      000255
                                                  000258      000277
         jx_MapIx                                8000905
         jx_IsTrue                               8000176
         jx_IsNull                               8000190
         jx_isNode                               8000198
         jx_Stream                               8000740
         jx_MemUse                               8000889
         jx_joblog                               8001112
         jx_Message                              8000130
         jx_GetNode                              8000151
         jx_NodeAdd                              8000523     8001198
         jx_ForEach                              8000811
         jx_MemLeak                              8000881
         jx_MemStat                              8000885
         jx_sqlOpen                              8000972
         jx_sqlRows                              8001006
         jx_sqlExec                              8001019
         jx_sqlCall                              8001029
         jx_sqlCode                              8001091
         jx_NodeCopy                             8000502     8001131     8001140
         jx_NewArray                             8000566
         jx_sqlClose                             8001012
         jx_SetCcsid                             8001253
         jwt_rsa_sign
         jx_ParseFile                            8000085
         jx_IsLiteral                            8000184
         jx_CopyValue                            8000491
         jx_NodeClone                            8000517
         jx_NewObject                            8000559
         jx_ArrayPush                            8000572
         jx_ArraySort                            8000608
         jx_getLength                            8000634
         jx_NodeMerge                            8000640
         jx_AsXmlText                            8000727
         jx_sqlUpdate                            8001038
         jx_sqlInsert                            8001050
         jx_sqlUpsert                            8001060
         jx_NodeRename                           8000204
         jx_GetValueVC                           8000403     8001121     8001170      000064
         jx_NodeDelete                           8000536     8001150     8001156
         jx_NodeUnlink                           8000542
         jx_ArraySlice                           8000596
         jx_AsJsonText                           8000699     8001162      000254
         jx_sqlColumns                           8000998
         jx_sqlGetMeta                           8001076
         jx_sqlConnect                           8001081
         jx_traceSetId                           8001107
         jwt_rsa_verify                                       000096
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     54
         jx_ParseString                          8000093      000063      000068      000209
                                                  000275
         jx_SetDecPoint                          8000110
         jx_SuccessTrue                          8000145
         jx_GetNodeNext                          8000212     8001211
         jx_GetNodeType                          8000395     8001191
         jx_GetValueNum                          8000426     8001181
         jx_GetValueInt                          8000435      000299      000326
         jx_ArrayAppend                          8000586
         jx_lookupValue                          8000620
         jx_CloneFormat                          8000678
         jx_SetIterator                          8000794
         jx_GetAttrNext                          8000859
         jx_httpRequest                          8001095
         jwt_hmac_encode                                      000092
         jx_GetNodeChild                         8000218     8001218
         jx_SetStrByName                         8000243      000213      000219      000225
                                                  000231
         jx_SetIntByName                         8000252      000237      000243      000249
         jx_SetDecByName                         8000261     8001261
         jx_SetPtrByName                         8000308     8000319
         jx_GetStrJoinVC                         8000414
         jx_GetValueBool                         8000444
         jx_GetValueDate                         8000453
         jx_GetValueTime                         8000462
         jx_NodeSanitize                         8000547
         jx_NodeCheckSum                         8000554
         jx_MergeObjects                         8000654
         jx_NodeMoveInto                         8000664
         jx_WriteXmlStmf                         8000715     8001283
         jx_AsXmlTextMem                         8000732
         jx_WriteCsvStmf                         8000746
         jx_GetAttrFirst                         8000853
         jx_sqlResultRow                         8000926
         jx_sqlResultSet                         8000935
         jx_sqlFetchNext                         8000991
         jx_GetDelimiters                        8000029
         jx_GetNodeParent                        8000224
         jx_SetNullByName                        8000230
         jx_SetEvalByName                        8000237
         jx_SetBoolByName                        8000270
         jx_SetDateByName                        8000279
         jx_SetTimeByName                        8000288
         jx_GetNodeNameVC                        8000381     8001226
         ILOB_XmlGetValue                        8000482
         jx_WriteJsonStmf                        8000686     8001273
         jx_AsJsonTextMem                        8000705
         jx_GetAttrNameVC                        8000865
         jx_sqlSetOptions                        8000919
         jx_sqlDisconnect                        8001087
         jx_SetDelimiters2                       8000032
         jx_SetValueByName                       8000340
         jx_GetNodeValueVC                       8000352     8001233
         jx_GetAttrValueVC                       8000836
         jx_SegmentDispose                       8000899
         jx_sqlGetInsertId                       8001072
         jx_GetOrCreateNode                      8000160
         jx_GetNodeValueNum                      8000360
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     55
         jx_GetNodeValueInt                      8000367
         jx_GetNodeValuePtr                      8000373
         jx_SegmentSelectNo                      8000894
         jwt_encodeBase64Url                                  000185      000187
         jwt_decodeBase64Url                                  000127      000156
         jx_parseStringCcsid                     8000102
         jx_GetMessageObject                     8000138
         jx_SetNodeAttrValue                     8000826     8000843
         jx_sqlFetchRelative                     8000982
         jx_GetNodeNameAsPath                    8000387
         jx_GetValueTimeStamp                    8000472
         jx_SetTimeStampByName                   8000298
         jx_GetNodeAttrValueVC                   8000817     8001242
         jx_setDelimitersByCcsid                 8000117
         jx_SetRecursiveIterator                 8000803
      Imported fields:
         Field             Attributes         Defined
         No references in the source.
      Exported fields:
         Field             Attributes         Defined
         No references in the source.
   * * * * *   E N D   O F   E X T E R N A L   R E F E R E N C E S   * * * * *
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     56
                          M e s s a g e   S u m m a r y
 Msg id  Sv Number Message text
*RNF5409 00      7 The prototyped call returns a value which is lost when CALLP
                   is used.
*RNF7031 00    246 The name or indicator is not referenced.
       * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
 5770WDS V7R4M0  190419 RN        IBM ILE RPG             MIHAELILEA/JWT           DEV740     24-04-25 09:52:45        Page     57
                            F i n a l   S u m m a r y
  Message Totals:
    Information  (00) . . . . . . . :      253
    Warning      (10) . . . . . . . :        0
    Error        (20) . . . . . . . :        0
    Severe Error (30+)  . . . . . . :        0
    ---------------------------------  -------
    Total . . . . . . . . . . . . . :      253
  Source Totals:
    Records . . . . . . . . . . . . :     1932
    Specifications  . . . . . . . . :      955
    Data records  . . . . . . . . . :        0
    Comments  . . . . . . . . . . . :      749
         * * * * *   E N D   O F   F I N A L   S U M M A R Y   * * * * *
Module JWT placed in library MIHAELILEA. 00 highest severity. Created on 24-04-25 at 09:52:45.
          * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
